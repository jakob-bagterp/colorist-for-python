{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Add Color to Your Terminal","text":""},{"location":"#colorist-for-python","title":"Colorist for Python \ud83c\udf08","text":""},{"location":"#what-is-colorist","title":"What Is Colorist?","text":"<p>Lightweight Python package that makes it easy and fast to print colored text in the terminal.</p>"},{"location":"#how-it-works","title":"How It Works","text":""},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Colorist is intended to be easy to use. Imagine you want to print a mix of colors in the terminal:</p> <pre><code>% This is RED!</code></pre> <p>Once installed, simply import the <code>colorist</code> module and start printing colored text with the <code>Color</code> class:</p> Python<pre><code>from colorist import Color\n\nprint(f\"This is {Color.RED}RED{Color.OFF}!\")\n</code></pre> <p>You can use the same method to apply other colors to text.</p>"},{"location":"#varied-color-palette","title":"Varied Color Palette","text":"<p>Or simply print a full line of colored text from a varied palette of colors:</p> Python<pre><code>from colorist import bright_magenta, bright_yellow, blue, green\n\ncyan(\"This is BLUE!\")\ngreen(\"This is GREEN!\")\nbright_magenta(\"This is BRIGHT MAGENTA!\")\nbright_yellow(\"This is BRIGHT YELLOW!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BLUE!\n% This is GREEN!\n% This is BRIGHT MAGENTA!\n% This is BRIGHT YELLOW!</code></pre>"},{"location":"#background-colors","title":"Background Colors","text":"<p>It's also possible to apply background colors to text:</p> Python<pre><code>from colorist import BgColor\n\nprint(f\"This is {BgColor.RED}RED{BgColor.OFF}!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is RED!</code></pre> <p>You can use the same method to apply other background colors to text.</p>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Ready to try more options and features? Let's get started with the installation or check out the user guide.</p> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>"},{"location":"ansi-escape-codes/","title":"How to Use ANSI Escape Codes \ud83c\udfa8","text":"<p>Colorist uses ANSI escape codes to style text in the terminal. This section explains how ANSI escape codes work, and how to use them in your own code.</p> <p>If you're new to ANSI escape codes, start with the introduction to learn the basics.</p>","tags":["Documentation","Tutorial","ANSI Escape Codes"]},{"location":"ansi-escape-codes/#standard-16-colors","title":"Standard 16 Colors","text":"<p>Use the standard palette of 16 colors to add color to both text and background with ANSI escape codes.</p>","tags":["Documentation","Tutorial","ANSI Escape Codes"]},{"location":"ansi-escape-codes/#extended-256-and-rgb-colors","title":"Extended 256 and RGB Colors","text":"<p>If your terminal supports an extended color space, you can use 256 extended colors or RGB colors to add more variety to your terminal output.</p>","tags":["Documentation","Tutorial","ANSI Escape Codes"]},{"location":"ansi-escape-codes/#effects","title":"Effects","text":"<p>ANSI escape codes can also be used to apply effects and styling to your terminal output.</p> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>","tags":["Documentation","Tutorial","ANSI Escape Codes"]},{"location":"ansi-escape-codes/effects/","title":"Effects in ANSI Escape Codes","text":"","tags":["Documentation","Tutorial","ANSI Escape Codes","Effects"]},{"location":"ansi-escape-codes/effects/#structure","title":"Structure","text":"<p>For effects and text styling, the escape codes are similar to the standard colors.</p> <p>For example, the sequence <code>\\x1b[4m</code> for underlined styling can be broken down into the following parts:</p> Part <code>\\x1b[</code> <code>4</code> <code>m</code> Description Starts sequence, also called the Control Sequence Introducer (CSI). Effect on or off, respectively between <code>1</code>-<code>8</code> or <code>21</code>-<code>28</code>. Ends sequence and calls the graphics function Select Graphic Rendition (SGR).","tags":["Documentation","Tutorial","ANSI Escape Codes","Effects"]},{"location":"ansi-escape-codes/effects/#cheat-sheet","title":"Cheat Sheet","text":"Effect On Escape Code Off Escape Code Output Example Bold 1 <code>\\x1b[1m</code> 21 <code>\\x1b[21m</code> <code>This is BOLD</code> Dim 2 <code>\\x1b[2m</code> 22 <code>\\x1b[22m</code> <code>This is DIMMED</code> Underline 4 <code>\\x1b[4m</code> 24 <code>\\x1b[24m</code> <code>This is UNDERLINED</code> Blink 5 <code>\\x1b[5m</code> 25 <code>\\x1b[25m</code> <code>This is BLINKING</code> Reverse 7 <code>\\x1b[7m</code> 27 <code>\\x1b[27m</code> <code>This is REVERSED</code> Hide 8 <code>\\x1b[7m</code> 28 <code>\\x1b[28m</code> <code>This is HIDDEN</code> <p>Different Color Schemes in Different Terminals</p> <p>Most terminals apply different color schemes so <code>\\x1b[31m</code> or <code>Color.RED</code> won't produce the exact same screen color of red. Some straight, others with an orange tint. For further reading, refer to this list of common terminals and their color schemes.</p>","tags":["Documentation","Tutorial","ANSI Escape Codes","Effects"]},{"location":"ansi-escape-codes/effects/#examples","title":"Examples","text":"<p>For example, <code>\\x1b[4m</code> is underlined text, and <code>\\x1b[24m</code> turns off the underline effect. When wrapped in a print statement, you can write this:</p> Python<pre><code>print(\"This is \\x1b[1mUNDERLINED\\x1b[21m text\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is UNDERLINED text</code></pre> <p>Another example with blinking text:</p> Python<pre><code>print(\"This is \\x1b[5mBLINKING\\x1b[25m text\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BLINKING text</code></pre> <p>How to Use Effects with Colorist</p> <p>Instead of using raw ANSI escape codes, it's convenient to use Colorist to generate them while keeping the code readable.</p> <p>Simply use the <code>Effect</code> class for effects and styling. For example:</p> Python<pre><code>from colorist import Effect\n\nprint(f\"This is {Effect.UNDERLINE}UNDERLINED{Effect.OFF} text\")\nprint(f\"This is {Effect.BLINK}BLINKING{Effect.BLINK} text\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% This is UNDERLINED text\n% This is BLINKING text</code></pre></p>","tags":["Documentation","Tutorial","ANSI Escape Codes","Effects"]},{"location":"ansi-escape-codes/extended-256-colors/","title":"Extended VGA Palette with 256 Colors in ANSI Escape Codes","text":"","tags":["Documentation","Tutorial","ANSI Escape Codes","Extended 256 Colors"]},{"location":"ansi-escape-codes/extended-256-colors/#structure","title":"Structure","text":"<p>The VGA color palette was introduced with the IBM VGA display adapter in 1987. The 8-bit color space has 256 colors in total, covering:</p> <ul> <li>216 colors in a 6x6x6 color cube of red, green, and blue</li> <li>24 shades of gray</li> </ul> <p>It works both with foreground text and background colors. Simply replace the three underscores <code>___</code> with any number from <code>0</code> to <code>255</code>:</p> Code Placement <code>\\x1b[38;5;___m</code> Text <code>\\x1b[48;5;___m</code> Background","tags":["Documentation","Tutorial","ANSI Escape Codes","Extended 256 Colors"]},{"location":"ansi-escape-codes/extended-256-colors/#sequence-parts","title":"Sequence Parts","text":"<p>For example, the sequences <code>\\x1b[38;5;123m</code> for turquoise foreground text and <code>\\x1b[48;5;123m</code> for turquoise background can be broken down into the following parts:</p> Part <code>\\x1b[</code> <code>38;5;</code><code>48;5;</code> <code>123</code> <code>m</code> Description Starts sequence, also called the Control Sequence Introducer (CSI). Select foreground text (<code>38;5;</code>) or background color (<code>48;5;</code>). Color code between <code>0</code>-<code>255</code>. Ends sequence and calls the graphics function Select Graphic Rendition (SGR).","tags":["Documentation","Tutorial","ANSI Escape Codes","Extended 256 Colors"]},{"location":"ansi-escape-codes/extended-256-colors/#examples","title":"Examples","text":"<p>For example, <code>\\x1b[38;5;166m</code> is an orange foreground text color, and <code>\\x1b[48;5;243m</code> is a light gray background color. When wrapped with <code>\\x1b[0m</code> to reset the color, you can write this:</p> Python<pre><code>print(\"This is \\x1b[38;5;166mORANGE\\x1b[0m text\")\nprint(\"This is \\x1b[48;5;243mLIGHT GRAY\\x1b[0m background\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is ORANGE text\n% This is LIGHT GRAY background</code></pre> <p>How to Use VGA Colors with Colorist</p> <p>Instead of using raw ANSI escape codes, it's convenient to use Colorist to generate them while keeping the code readable.</p> <p>Simply use the <code>ColorVGA</code> class for foreground text colors or the <code>BgColorVGA</code> class for background colors. For example:</p> Python<pre><code>from colorist import ColorVGA, BgColorVGA\n\norange = ColorVGA(166)\nlight_gray = BgColorVGA(243)\n\nprint(f\"This is {orange}ORANGE{orange.OFF} text\")\nprint(f\"This is {light_gray}LIGHT GRAY{light_gray.OFF} background\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% This is ORANGE text\n% This is LIGHT GRAY background</code></pre></p>","tags":["Documentation","Tutorial","ANSI Escape Codes","Extended 256 Colors"]},{"location":"ansi-escape-codes/extended-256-colors/#cheat-sheets","title":"Cheat Sheets","text":"","tags":["Documentation","Tutorial","ANSI Escape Codes","Extended 256 Colors"]},{"location":"ansi-escape-codes/extended-256-colors/#standard-palette","title":"Standard Palette","text":"0\u00a0 \u00a01\u00a0 \u00a02\u00a0 \u00a03\u00a0 \u00a04\u00a0 \u00a05\u00a0 \u00a06\u00a0 \u00a07\u00a0 \u00a08\u00a0 \u00a09\u00a0 10 11 12 13 14 15","tags":["Documentation","Tutorial","ANSI Escape Codes","Extended 256 Colors"]},{"location":"ansi-escape-codes/extended-256-colors/#examples_1","title":"Examples","text":"<p>Let's use color <code>11</code> for yellow text and color <code>14</code> for cyan background:</p> Python<pre><code>print(\"This is \\x1b[38;5;11mYELLOW\\x1b[0m text\")\nprint(\"This is \\x1b[48;5;14CYAN\\x1b[0m background\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is YELLOW text\n% This is CYAN background</code></pre>","tags":["Documentation","Tutorial","ANSI Escape Codes","Extended 256 Colors"]},{"location":"ansi-escape-codes/extended-256-colors/#gray-scale","title":"Gray Scale","text":"232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255","tags":["Documentation","Tutorial","ANSI Escape Codes","Extended 256 Colors"]},{"location":"ansi-escape-codes/extended-256-colors/#examples_2","title":"Examples","text":"<p>Let's use color <code>244</code> for light gray text and color <code>234</code> for dark gray background:</p> Python<pre><code>print(\"This is \\x1b[38;5;244mLIGHT GRAY\\x1b[0m text\")\nprint(\"This is \\x1b[48;5;234mDARK GRAY\\x1b[0m background\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is LIGHT GRAY text\n% This is DARK GRAY background</code></pre>","tags":["Documentation","Tutorial","ANSI Escape Codes","Extended 256 Colors"]},{"location":"ansi-escape-codes/extended-256-colors/#extended-palette","title":"Extended Palette","text":"16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231","tags":["Documentation","Tutorial","ANSI Escape Codes","Extended 256 Colors"]},{"location":"ansi-escape-codes/extended-256-colors/#examples_3","title":"Examples","text":"<p>Let's use color <code>201</code> for pink text and color <code>21</code> for royal blue background:</p> Python<pre><code>print(\"This is \\x1b[38;5;201mPINK\\x1b[0m text\")\nprint(\"This is \\x1b[48;5;21mROYAL BLUE\\x1b[0m background\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is PINK text\n% This is ROYAL BLUE background</code></pre>","tags":["Documentation","Tutorial","ANSI Escape Codes","Extended 256 Colors"]},{"location":"ansi-escape-codes/introduction/","title":"What Are ANSI Escape Codes?","text":"<p>ANSI escape sequences were introduced in the 1970s as a standard to style text terminals with color, font styling, and other options. They are supported by most modern terminals in operating systems like Windows, macOS, and Linux.</p>","tags":["Documentation","Tutorial","ANSI Escape Codes"]},{"location":"ansi-escape-codes/introduction/#building-blocks","title":"Building Blocks","text":"","tags":["Documentation","Tutorial","ANSI Escape Codes"]},{"location":"ansi-escape-codes/introduction/#escape-character","title":"Escape Character","text":"<p>They always start with <code>\\x1b</code>, <code>\\033</code>, <code>\\u001b</code>, or <code>\\e</code> or depending on the operating system or programming language. Technically this inserts byte 27 into a string, which is equivalent to <code>0x1b</code> and the <code>ESC</code> key when you look at an ASCII table. Hence the name.</p> Escape Character Description <code>\\x1b</code> Hexadecimal <code>\\033</code> Octal <code>\\u001b</code> Unicode <code>\\e</code> Escape in C <code>27</code> Decimal <p>This first part is called the Control Sequence Introducer (CSI), whichever option you use. For convenience, we will use <code>\\x1b</code> as the escape character throughout this section.</p>","tags":["Documentation","Tutorial","ANSI Escape Codes"]},{"location":"ansi-escape-codes/introduction/#sequence-parts","title":"Sequence Parts","text":"<p>All ANSI escape sequences follow the same pattern. For example, the sequence <code>\\x1b[31m</code> can be broken down into:</p> Part <code>\\x1b[</code> <code>31</code> <code>m</code> Description Starts sequence, also called the Control Sequence Introducer (CSI). Color code for various text and background colors, e.g. between <code>30</code>-<code>49</code> or <code>90</code>-<code>109</code>. Ends sequence and calls the graphics function Select Graphic Rendition (SGR).","tags":["Documentation","Tutorial","ANSI Escape Codes"]},{"location":"ansi-escape-codes/introduction/#examples","title":"Examples","text":"<p>Though ANSI escape sequences appear in a string as multiple characters, they are in reality interpreted by the terminal as a single command. For example:</p> Sequence Description <code>\\x1b[31m</code> Change the color to red <code>\\x1b[0m</code> Reset any styling <p>Imagine that we want to achieve the following terminal output:</p> <pre><code>% I want RED color</code></pre> <p>We simply wrap the word <code>RED</code> with the ANSI escape sequences <code>\\x1b[31m</code> to set the color and <code>\\x1b[0m</code> to reset the color. The terminal will then interpret this as a single command while the characters of the escape sequences are hidden in the terminal output. The user only sees the changed color.</p> <p>How to apply this in a print command:</p> Python<pre><code>print(\"I want \\x1b[31mRED\\x1b[0m color\")\n</code></pre> <p>You can use the same method to apply other colors to text or backgrounds.</p> <p>Humanised Sequence Is Easier to Read</p> <p>This is also why it's convenient to use Colorist instead of manually writing raw ANSI escape codes.</p> <p>The <code>Color</code> class will generate the ANSI escape sequences and keep the code readable. For example:</p> Python<pre><code>from colorist import Color\n\nprint(f\"I want {Color.RED}RED{Color.OFF} color\")\n</code></pre> <p>The result in the terminal output is the same as before:</p> <p><pre><code>% I want RED color</code></pre></p>","tags":["Documentation","Tutorial","ANSI Escape Codes"]},{"location":"ansi-escape-codes/rgb-colors/","title":"24-Bit RGB Colors in ANSI Escape Codes","text":"","tags":["Documentation","Tutorial","ANSI Escape Codes","RGB Colors"]},{"location":"ansi-escape-codes/rgb-colors/#structure","title":"Structure","text":"<p>The 24-bit RGB color space represents a much broader array of colors. Simply use any number from <code>0</code> to <code>255</code> to set each of the red <code>r</code>, green <code>g</code>, and blue <code>b</code> colors in the sequences <code>38;2;r;g;b</code> for text color and <code>48;2;r;g;b</code> for background color:</p> Code Placement <code>\\x1b[38;2;r;g;bm</code> Text <code>\\x1b[48;2;r;g;bm</code> Background","tags":["Documentation","Tutorial","ANSI Escape Codes","RGB Colors"]},{"location":"ansi-escape-codes/rgb-colors/#sequence-parts","title":"Sequence Parts","text":"<p>For example, the color code for light blue <code>rgb(173, 216, 230)</code> can be broken down into the following parts:</p> Part <code>\\x1b[</code> <code>38;2;</code><code>48;2;</code> <code>173;216;230</code> <code>m</code> Description Starts sequence, also called the Control Sequence Introducer (CSI). Select foreground text (<code>38;2;</code>) or background color (<code>48;2;</code>). RGB color code where each number is between <code>0</code>-<code>255</code>. Ends sequence and calls the graphics function Select Graphic Rendition (SGR). <p>Disclaimer</p> <p>Not all terminals support 24-bit colors in RGB, HSL, or Hex. If your terminal does support such advanced colors, read on.</p>","tags":["Documentation","Tutorial","ANSI Escape Codes","RGB Colors"]},{"location":"ansi-escape-codes/rgb-colors/#examples","title":"Examples","text":"<p>For example, <code>\\x1b[38;2;142;194;21m</code> is a lime green foreground text color, and <code>\\x1b[48;2;194;21;139m</code> is a rosa background color. When wrapped with <code>\\x1b[0m</code> to reset the color, you can write this:</p> Python<pre><code>print(\"This is \\x1b[38;2;142;194;21mLIME GREEN\\x1b[0m text\")\nprint(\"This is \\x1b[48;2;194;21;139mROSA\\x1b[0m background\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is LIME GREEN text\n% This is ROSA background</code></pre> <p>How to Use RGB Colors with Colorist</p> <p>Instead of using raw ANSI escape codes, it's convenient to use Colorist to generate them while keeping the code readable.</p> <p>Simply use the <code>ColorRGB</code> class for foreground text colors or the <code>BgColorRGB</code> class for background colors. For example:</p> Python<pre><code>from colorist import ColorRGB, BgColorRGB\n\nlime_green = ColorRGB(142, 194, 21)\nrosa = BgColorRGB(194, 21, 139)\n\nprint(f\"This is {lime_green}LIME GREEN{lime_green.OFF} text\")\nprint(f\"This is {rosa}ROSA{rosa.OFF} background\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% This is LIME GREEN text\n% This is ROSA background</code></pre></p> <p>In Colorist, the RGB color space is used to furthermore support definition of colors as HSL or Hex.</p>","tags":["Documentation","Tutorial","ANSI Escape Codes","RGB Colors"]},{"location":"ansi-escape-codes/standard-16-colors/","title":"Standard 16 Colors in ANSI Escape Codes","text":"<p>There are 8 normal colors and 8 bright colors \u2013\u00a016 in total. The bright colors are the same as the normal colors, yet with a higher intensity, and each color can be in the foreground (i.e. as text) or background.</p>","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"ansi-escape-codes/standard-16-colors/#structure","title":"Structure","text":"<p>The 8 colors are simply black and white, plus the 6 colors of the rainbow. Firstly, the three primary colors red, green, and blue. Then the secondary colors yellow, magenta, and cyan:</p> Code Color Example 0 Black 1 Red 2 Green 3 Yellow 4 Blue 5 Magenta 6 Cyan 7 White <p>Each color then needs to be prepended by a foreground or background option. When combining the two codes \u2013 simply replace the underscore <code>_</code> with the missing color code \u2013 <code>34</code> for example is blue text, and <code>44</code> is blue background:</p> Code Placement Intensity 3_ Text Standard 4_ Background Standard 9_ Text Bright 10_ Background Bright","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"ansi-escape-codes/standard-16-colors/#sequence-parts","title":"Sequence Parts","text":"","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"ansi-escape-codes/standard-16-colors/#normal-colors","title":"Normal Colors","text":"<p>For example, the sequences <code>\\x1b[31m</code> for red foreground text and <code>\\x1b[41m</code> for red background can be broken down into the following parts:</p> Part <code>\\x1b[</code> <code>3</code><code>4</code> <code>1</code> <code>m</code> Description Starts sequence, also called the Control Sequence Introducer (CSI). Select foreground text (<code>3</code>) or background color (<code>4</code>). Color code between <code>0</code>-<code>7</code>. Ends sequence and calls the graphics function Select Graphic Rendition (SGR).","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"ansi-escape-codes/standard-16-colors/#bright-colors","title":"Bright Colors","text":"<p>For example, the sequences <code>\\x1b[92m</code> for bright green foreground text and <code>\\x1b[102m</code> for bright green background can be broken down into the following parts:</p> Part <code>\\x1b[</code> <code>9</code><code>10</code> <code>2</code> <code>m</code> Description Starts sequence, also called the Control Sequence Introducer (CSI). Select foreground text (<code>9</code>) or background color (<code>10</code>). Color code between <code>0</code>-<code>7</code>. Ends sequence and calls the graphics function Select Graphic Rendition (SGR).","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"ansi-escape-codes/standard-16-colors/#foreground-text-and-background-colors","title":"Foreground Text and Background Colors","text":"<p>To apply different color and styling options, simply replace the two underscores <code>__</code> in <code>\\x1b[__m</code> with any of the following color codes:</p> Color Example Text Background Bright Example Bright Text Bright Background Black 30 40 90 100 Red 31 41 91 101 Green 32 42 92 102 Yellow 33 43 93 103 Blue 34 44 94 104 Magenta 35 45 95 105 Cyan 36 46 96 106 White 37 47 97 107 Default 39 49 99 109 Reset 0 0 0 0 <p>Tip</p> <p>Remember to use <code>\\x1b[0m</code> every time you want to revert back to the default terminal text style. Otherwise, any color or styling may spill over and into other terminal messages.</p> <p>When using Colorist, you can for example use <code>Color.OFF</code> to reset the terminal text style.</p>","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"ansi-escape-codes/standard-16-colors/#examples","title":"Examples","text":"<p>How to apply the escape color codes:</p> Python<pre><code>print(\"This is \\x1b[31mRED\\x1b[0m text\")\nprint(\"This is \\x1b[41mRED\\x1b[0m background\")\nprint(\"This is \\x1b[91mBRIGHT RED\\x1b[0m text\")\nprint(\"This is \\x1b[101mBRIGHT RED\\x1b[0m background\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is RED text\n% This is RED background\n% This is BRIGHT RED text\n% This is BRIGHT RED background</code></pre> <p>How to Use Colors with Colorist</p> <p>Instead of using raw ANSI escape codes, it's convenient to use Colorist to generate the them while keeping the code readable.</p> <p>Simply use the <code>Color</code> or <code>BrightColor</code> classes for foreground text colors, or the <code>BgColor</code> or <code>BgBrightColor</code> classes for background colors. For example:</p> Python<pre><code>from colorist import Color, BgColor\n\nprint(f\"This is {Color.RED}RED{Color.OFF} text\")\nprint(f\"This is {BgColor.RED}RED{Color.OFF} background\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% This is RED text\n% This is RED background</code></pre></p>","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"ansi-escape-codes/standard-16-colors/#cheat-sheets","title":"Cheat Sheets","text":"","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"ansi-escape-codes/standard-16-colors/#foreground-text-colors","title":"Foreground Text Colors","text":"","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"ansi-escape-codes/standard-16-colors/#normal-colors_1","title":"Normal Colors","text":"Example Color Code Escape Code Output Example Black 30 <code>\\x1b[30m</code> <code>This is BLACK</code> Red 31 <code>\\x1b[31m</code> <code>This is RED</code> Green 32 <code>\\x1b[32m</code> <code>This is GREEN</code> Yellow 33 <code>\\x1b[33m</code> <code>This is YELLOW</code> Blue 34 <code>\\x1b[34m</code> <code>This is BLUE</code> Magenta 35 <code>\\x1b[35m</code> <code>This is MAGENTA</code> Cyan 36 <code>\\x1b[36m</code> <code>This is CYAN</code> White 37 <code>\\x1b[37m</code> <code>This is WHITE</code>","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"ansi-escape-codes/standard-16-colors/#bright-colors_1","title":"Bright Colors","text":"Example Color Code Escape Code Output Example Black 90 <code>\\x1b[90m</code> <code>This is BRIGHT BLACK</code> Red 91 <code>\\x1b[91m</code> <code>This is BRIGHT RED</code> Green 92 <code>\\x1b[92m</code> <code>This is BRIGHT GREEN</code> Yellow 93 <code>\\x1b[93m</code> <code>This is BRIGHT YELLOW</code> Blue 94 <code>\\x1b[94m</code> <code>This is BRIGHT BLUE</code> Magenta 95 <code>\\x1b[95m</code> <code>This is BRIGHT MAGENTA</code> Cyan 96 <code>\\x1b[96m</code> <code>This is BRIGHT CYAN</code> White 97 <code>\\x1b[97m</code> <code>This is BRIGHT WHITE</code>","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"ansi-escape-codes/standard-16-colors/#background-colors","title":"Background Colors","text":"","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"ansi-escape-codes/standard-16-colors/#normal-colors_2","title":"Normal Colors","text":"Example Color Code Escape Code Output Example Black 40 <code>\\x1b[40m</code> <code>This is BLACK</code> Red 41 <code>\\x1b[41m</code> <code>This is RED</code> Green 42 <code>\\x1b[42m</code> <code>This is GREEN</code> Yellow 43 <code>\\x1b[43m</code> <code>This is YELLOW</code> Blue 44 <code>\\x1b[44m</code> <code>This is BLUE</code> Magenta 45 <code>\\x1b[45m</code> <code>This is MAGENTA</code> Cyan 46 <code>\\x1b[46m</code> <code>This is CYAN</code> White 47 <code>\\x1b[47m</code> <code>This is WHITE</code>","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"ansi-escape-codes/standard-16-colors/#bright-colors_2","title":"Bright Colors","text":"Example Color Code Escape Code Output Example Black 100 <code>\\x1b[100m</code> <code>This is BRIGHT BLACK</code> Red 101 <code>\\x1b[101m</code> <code>This is BRIGHT RED</code> Green 102 <code>\\x1b[102m</code> <code>This is BRIGHT GREEN</code> Yellow 103 <code>\\x1b[103m</code> <code>This is BRIGHT YELLOW</code> Blue 104 <code>\\x1b[104m</code> <code>This is BRIGHT BLUE</code> Magenta 105 <code>\\x1b[105m</code> <code>This is BRIGHT MAGENTA</code> Cyan 106 <code>\\x1b[106m</code> <code>This is BRIGHT CYAN</code> White 107 <code>\\x1b[107m</code> <code>This is BRIGHT WHITE</code>","tags":["Documentation","Tutorial","ANSI Escape Codes","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"getting-started/","title":"Get Started with Colorist in 2 Easy Steps \ud83d\ude80","text":"<p>Ready to try the easy way to add color to your Python code? Let's get started:</p>","tags":["Tutorial","Installation","PyPI"]},{"location":"getting-started/#1-install-colorist-for-python-package","title":"1. Install Colorist for Python Package","text":"<p>Assuming that Python is already installed, execute this command in the terminal to install the Colorist package:</p> <pre><code>pip install colorist\n</code></pre> <p>Find more details and options in the installation guide.</p>","tags":["Tutorial","Installation","PyPI"]},{"location":"getting-started/#2-first-script","title":"2. First Script","text":"<p>You're now ready to go:</p> Python<pre><code>from colorist import Color, green\n\ngreen(\"This is GREEN!\")\nprint(f\"Both {Color.RED}RED{Color.OFF}...\")\nprint(f\"... and {Color.YELLOW}YELLOW{Color.OFF} are nice colors\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is GREEN!\n% Both RED...\n% ... and YELLOW are nice colors</code></pre>","tags":["Tutorial","Installation","PyPI"]},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Find more usage examples and tutorials in the user guide section.</p> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>","tags":["Tutorial","Installation","PyPI"]},{"location":"getting-started/installation/","title":"How to Install Colorist for Python","text":"","tags":["Installation","PyPI","Homebrew"]},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> </ul> <p>Assuming that Python is installed already, you can install Colorist with either of the following package managers: PyPI or Homebrew.</p>","tags":["Installation","PyPI","Homebrew"]},{"location":"getting-started/installation/#pypi","title":"PyPI","text":"<p>For PyPI, execute this command in the terminal:</p> <pre><code>pip install colorist\n</code></pre> <p>Keep the package up to date with this command:</p> <pre><code>pip install --upgrade colorist\n</code></pre>","tags":["Installation","PyPI","Homebrew"]},{"location":"getting-started/installation/#homebrew","title":"Homebrew","text":"<p>If you already have installed the Homebrew package manager for Mac and Linux, execute this terminal command to tap and install Colorist:</p> <pre><code>brew tap jakob-bagterp/colorist\nbrew install colorist\n</code></pre> <p>Use the same commands to keep the package up to date with Homebrew.</p>","tags":["Installation","PyPI","Homebrew"]},{"location":"index/tags/","title":"Tags","text":"<p>List of all tags and relevant pages:</p>"},{"location":"index/tags/#tag:ansi-escape-codes","title":"ANSI Escape Codes","text":"<ul> <li>            Effects          </li> <li>            Extended 256 Colors          </li> <li>            How to Use ANSI Escape Codes          </li> <li>            Introduction          </li> <li>            RGB Colors          </li> <li>            Standard 16 Colors          </li> </ul>"},{"location":"index/tags/#tag:background-colors","title":"Background Colors","text":"<ul> <li>            Background          </li> <li>            Full Line          </li> <li>            Mixed          </li> <li>            Normal and Bright Palette          </li> <li>            Standard 16 Colors          </li> </ul>"},{"location":"index/tags/#tag:documentation","title":"Documentation","text":"<ul> <li>            Effects          </li> <li>            Extended 256 Colors          </li> <li>            Full Line          </li> <li>            Full Line          </li> <li>            Full Line          </li> <li>            HSL          </li> <li>            Hex          </li> <li>            How to Use ANSI Escape Codes          </li> <li>            Introduction          </li> <li>            Mixed          </li> <li>            Mixed          </li> <li>            Mixed          </li> <li>            RGB          </li> <li>            RGB Colors          </li> <li>            Standard 16 Colors          </li> <li>            Supported Colors and Styles by Terminals          </li> <li>            VGA          </li> </ul>"},{"location":"index/tags/#tag:effects","title":"Effects","text":"<ul> <li>            Effects          </li> <li>            Effects and Styling          </li> <li>            Full Line          </li> <li>            Mixed          </li> </ul>"},{"location":"index/tags/#tag:extended-256-colors","title":"Extended 256 Colors","text":"<ul> <li>            Extended 256 Colors          </li> </ul>"},{"location":"index/tags/#tag:extended-colors","title":"Extended Colors","text":"<ul> <li>            HSL          </li> <li>            HSL          </li> <li>            Hex          </li> <li>            Hex          </li> <li>            RGB          </li> <li>            RGB          </li> <li>            VGA          </li> <li>            VGA          </li> </ul>"},{"location":"index/tags/#tag:features","title":"Features","text":"<ul> <li>            Background          </li> <li>            Backwards Compatible String Formats          </li> <li>            Effects and Styling          </li> <li>            HSL          </li> <li>            Hex          </li> <li>            Normal and Bright Palette          </li> <li>            RGB          </li> <li>            Text          </li> <li>            User Guide for Colorist for Python          </li> <li>            VGA          </li> </ul>"},{"location":"index/tags/#tag:foreground-colors","title":"Foreground Colors","text":"<ul> <li>            Full Line          </li> <li>            Mixed          </li> <li>            Normal and Bright Palette          </li> <li>            Standard 16 Colors          </li> <li>            Text          </li> </ul>"},{"location":"index/tags/#tag:hsl-colors","title":"HSL Colors","text":"<ul> <li>            HSL          </li> <li>            HSL          </li> </ul>"},{"location":"index/tags/#tag:hex-colors","title":"Hex Colors","text":"<ul> <li>            Hex          </li> <li>            Hex          </li> </ul>"},{"location":"index/tags/#tag:homebrew","title":"Homebrew","text":"<ul> <li>            Installation          </li> </ul>"},{"location":"index/tags/#tag:installation","title":"Installation","text":"<ul> <li>            Get Started in 2 Easy Steps          </li> <li>            Installation          </li> </ul>"},{"location":"index/tags/#tag:pypi","title":"PyPI","text":"<ul> <li>            Get Started in 2 Easy Steps          </li> <li>            Installation          </li> </ul>"},{"location":"index/tags/#tag:rgb-colors","title":"RGB Colors","text":"<ul> <li>            RGB          </li> <li>            RGB          </li> <li>            RGB Colors          </li> </ul>"},{"location":"index/tags/#tag:standard-colors","title":"Standard Colors","text":"<ul> <li>            Background          </li> <li>            Full Line          </li> <li>            Full Line          </li> <li>            Mixed          </li> <li>            Mixed          </li> <li>            Normal and Bright Palette          </li> <li>            Standard 16 Colors          </li> <li>            Text          </li> </ul>"},{"location":"index/tags/#tag:text-colors","title":"Text Colors","text":"<ul> <li>            Full Line          </li> <li>            Mixed          </li> <li>            Normal and Bright Palette          </li> <li>            Standard 16 Colors          </li> <li>            Text          </li> </ul>"},{"location":"index/tags/#tag:tutorial","title":"Tutorial","text":"<ul> <li>            Background          </li> <li>            Backwards Compatible String Formats          </li> <li>            Effects          </li> <li>            Effects and Styling          </li> <li>            Extended 256 Colors          </li> <li>            Full Line          </li> <li>            Full Line          </li> <li>            Full Line          </li> <li>            Get Started in 2 Easy Steps          </li> <li>            HSL          </li> <li>            HSL          </li> <li>            Hex          </li> <li>            Hex          </li> <li>            How to Use ANSI Escape Codes          </li> <li>            Introduction          </li> <li>            Mixed          </li> <li>            Mixed          </li> <li>            Mixed          </li> <li>            Normal and Bright Palette          </li> <li>            RGB          </li> <li>            RGB          </li> <li>            RGB Colors          </li> <li>            Standard 16 Colors          </li> <li>            Text          </li> <li>            User Guide for Colorist for Python          </li> <li>            VGA          </li> <li>            VGA          </li> </ul>"},{"location":"index/tags/#tag:vga-colors","title":"VGA Colors","text":"<ul> <li>            VGA          </li> <li>            VGA          </li> </ul>"},{"location":"project/donate/","title":"Donations","text":"<p>This project is a community-driven initiative, developed without commercial interests and shared freely for anyone to use, improve, and build upon. What began as a simple idea has grown beyond expectations, with downloads far surpassing our initial goals:</p> <p></p> <p>Your support\u2014whether through contributions, feedback, or simply spreading the word\u2014is vital to help us maintain and continue enhancing the project for everyone.</p> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>"},{"location":"project/support-and-contribution/","title":"Support and Contribution","text":"<p>This open-source project welcomes contributions from the community. Your support is vital for maintaining and improving it.</p> <p>Before contributing or reporting issues, please ensure that you ruled out issues that are not related to this project.</p>"},{"location":"project/support-and-contribution/#contribute","title":"Contribute","text":"<p>If you have suggestions or changes to the module, feel free to add to the code and create a pull request.</p>"},{"location":"project/support-and-contribution/#report-bugs","title":"Report Bugs","text":"<p>If you encounter any issues, you can report them as bugs or raise issues.</p> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>"},{"location":"reference/","title":"Documentation \ud83d\udcda","text":"<p>Find details about all methods in this section.</p>"},{"location":"reference/#quick-links","title":"Quick Links","text":""},{"location":"reference/#text-colors","title":"Text Colors","text":"<ul> <li>Full line</li> <li>Mixed</li> </ul>"},{"location":"reference/#background-colors","title":"Background Colors","text":"<ul> <li>Full line</li> <li>Mixed</li> </ul>"},{"location":"reference/#effects-and-styling","title":"Effects and Styling","text":"<ul> <li>Full line</li> <li>Mixed</li> </ul>"},{"location":"reference/#extended-colors","title":"Extended Colors","text":"<ul> <li>VGA</li> <li>RGB</li> <li>HSL</li> <li>Hex</li> </ul> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>"},{"location":"reference/background-colors/full-line/","title":"Full Line Text Functions for Background Colors","text":"","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#color-maps","title":"Color Maps","text":"","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#normal-colors","title":"Normal Colors","text":"Color Full Text Function Example <code>bg_green(\"text\")</code> <code>This is GREEN background!</code> <code>bg_yellow(\"text\")</code> <code>This is YELLOW background!</code> <code>bg_red(\"text\")</code> <code>This is RED background!</code> <code>bg_magenta(\"text\")</code> <code>This is MAGENTA background!</code> <code>bg_blue(\"text\")</code> <code>This is BLUE background!</code> <code>bg_cyan(\"text\")</code> <code>This is CYAN background!</code> <code>bg_white(\"text\")</code> <code>This is WHITE background!</code> <code>bg_black(\"text\")</code> <code>This is BLACK background!</code> Example Python<pre><code>from colorist import bg_green, bg_yellow, bg_red\n\nbg_green(\"This is GREEN background!\")\nbg_yellow(\"This is YELLOW background!\")\nbg_red(\"This is RED background!\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% This is GREEN background!\n% This is YELLOW background!\n% This is RED background!</code></pre></p>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#bright-colors","title":"Bright Colors","text":"Color Full Text Function Example <code>bg_bright_green(\"text\")</code> <code>This is BRIGHT GREEN background!</code> <code>bg_bright_yellow(\"text\")</code> <code>This is BRIGHT YELLOW background!</code> <code>bg_bright_red(\"text\")</code> <code>This is BRIGHT RED background!</code> <code>bg_bright_magenta(\"text\")</code> <code>This is BRIGHT MAGENTA background!</code> <code>bg_bright_blue(\"text\")</code> <code>This is BRIGHT BLUE background!</code> <code>bg_bright_cyan(\"text\")</code> <code>This is BRIGHT CYAN background!</code> <code>bg_bright_white(\"text\")</code> <code>This is BRIGHT WHITE background!</code> <code>bg_bright_black(\"text\")</code> <code>This is BRIGHT BLACK background!</code> <p>Limited Support for Bright Colors</p> <p>Note that bright colors are supported by many terminals, yet not all as bright colors aren't part of the standard set of ANSI colors.</p> Example Python<pre><code>from colorist import bg_bright_green, bg_bright_yellow, bg_bright_red\n\nbg_bright_green(\"This is BRIGHT GREEN background!\")\nbg_bright_yellow(\"This is BRIGHT YELLOW background!\")\nbg_bright_red(\"This is BRIGHT RED background!\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% This is BRIGHT GREEN background!\n% This is BRIGHT YELLOW background!\n% This is BRIGHT RED background!</code></pre></p>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#functions","title":"Functions","text":"","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.color.MkDocstringsWrapper.bg_black","title":"<code>bg_black(text)</code>","text":"<p>Prints full line of text on black background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_black\n\nbg_black(\"This is BLACK background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BLACK background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.color.MkDocstringsWrapper.bg_blue","title":"<code>bg_blue(text)</code>","text":"<p>Prints full line of text on blue background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_blue\n\nbg_blue(\"This is BLUE background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BLUE background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.color.MkDocstringsWrapper.bg_cyan","title":"<code>bg_cyan(text)</code>","text":"<p>Prints full line of text on cyan background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_cyan\n\nbg_cyan(\"This is CYAN background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is CYAN background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.color.MkDocstringsWrapper.bg_green","title":"<code>bg_green(text)</code>","text":"<p>Prints full line of text on green background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_green\n\nbg_green(\"This is GREEN background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is GREEN background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.color.MkDocstringsWrapper.bg_magenta","title":"<code>bg_magenta(text)</code>","text":"<p>Prints full line of text on magenta background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_magenta\n\nbg_magenta(\"This is MAGENTA background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is MAGENTA background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.color.MkDocstringsWrapper.bg_red","title":"<code>bg_red(text)</code>","text":"<p>Prints full line of text on red background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_red\n\nbg_red(\"This is RED background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is RED background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.color.MkDocstringsWrapper.bg_white","title":"<code>bg_white(text)</code>","text":"<p>Prints full line of text on white background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_white\n\nbg_white(\"This is WHITE background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is WHITE background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.color.MkDocstringsWrapper.bg_yellow","title":"<code>bg_yellow(text)</code>","text":"<p>Prints full line of text on yellow background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_yellow\n\nbg_yellow(\"This is YELLOW background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is YELLOW background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.bright_color.MkDocstringsWrapper.bg_bright_black","title":"<code>bg_bright_black(text)</code>","text":"<p>Prints full line of text on bright black background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_bright_black\n\nbg_bright_black(\"This is BRIGHT BLACK background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT BLACK background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.bright_color.MkDocstringsWrapper.bg_bright_blue","title":"<code>bg_bright_blue(text)</code>","text":"<p>Prints full line of text on bright blue background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_bright_blue\n\nbg_bright_blue(\"This is BRIGHT BLUE background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT BLUE background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.bright_color.MkDocstringsWrapper.bg_bright_cyan","title":"<code>bg_bright_cyan(text)</code>","text":"<p>Prints full line of text on bright cyan background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_bright_cyan\n\nbg_bright_cyan(\"This is BRIGHT CYAN background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT CYAN background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.bright_color.MkDocstringsWrapper.bg_bright_green","title":"<code>bg_bright_green(text)</code>","text":"<p>Prints full line of text on bright green background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_bright_green\n\nbg_bright_green(\"This is BRIGHT GREEN background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT GREEN background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.bright_color.MkDocstringsWrapper.bg_bright_magenta","title":"<code>bg_bright_magenta(text)</code>","text":"<p>Prints full line of text on bright magenta background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_bright_magenta\n\nbg_bright_magenta(\"This is BRIGHT MAGENTA background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT MAGENTA background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.bright_color.MkDocstringsWrapper.bg_bright_red","title":"<code>bg_bright_red(text)</code>","text":"<p>Prints full line of text on bright red background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_bright_red\n\nbg_bright_red(\"This is BRIGHT RED background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT RED background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.bright_color.MkDocstringsWrapper.bg_bright_white","title":"<code>bg_bright_white(text)</code>","text":"<p>Prints full line of text on bright white background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_bright_white\n\nbg_bright_white(\"This is BRIGHT WHITE background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT WHITE background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/full-line/#colorist.print.background.bright_color.MkDocstringsWrapper.bg_bright_yellow","title":"<code>bg_bright_yellow(text)</code>","text":"<p>Prints full line of text on bright yellow background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required Example <pre><code>from colorist import bg_bright_yellow\n\nbg_bright_yellow(\"This is BRIGHT YELLOW background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT YELLOW background!</code></pre>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/mixed/","title":"Custom String Styling for Background Colors","text":"","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/mixed/#bgcolor","title":"<code>BgColor</code>","text":"<p>Enumerable class of all available standard background colors.</p> <p>Options:</p> Color Color Code Example <code>BgColor.GREEN</code> <code>This is GREEN background!</code> <code>BgColor.YELLOW</code> <code>This is YELLOW background!</code> <code>BgColor.RED</code> <code>This is RED background!</code> <code>BgColor.MAGENTA</code> <code>This is MAGENTA background!</code> <code>BgColor.BLUE</code> <code>This is BLUE background!</code> <code>BgColor.CYAN</code> <code>This is CYAN background!</code> <code>BgColor.WHITE</code> <code>This is WHITE background!</code> <code>BgColor.BLACK</code> <code>This is BLACK background!</code> - <code>BgColor.DEFAULT</code> - - <code>BgColor.OFF</code> - <p>Example:</p> Example Python<pre><code>from colorist import BgColor\n\nprint(f\"I want {BgColor.RED}RED{BgColor.OFF} background color inside this paragraph\")\n\nprint(f\"Both {BgColor.GREEN}GREEN{BgColor.OFF} and {BgColor.YELLOW}YELLOW{BgColor.OFF} are nice background colors\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% I want RED background color inside this paragraph\n% Both GREEN and YELLOW are nice background colors</code></pre></p> <p>Tip</p> <p>Remember to turn off a color with <code>BgColor.OFF</code> or <code>BgBrightColor.OFF</code> every time you want to revert back to the default terminal text style. Otherwise, the effect may spill over and into other terminal messages.</p>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/background-colors/mixed/#bgbrightcolor","title":"<code>BgBrightColor</code>","text":"<p>Enumerable class of all available standard bright background colors.</p> <p>Options:</p> Color Color Code Example <code>BgBrightColor.GREEN</code> <code>This is BRIGHT GREEN background!</code> <code>BgBrightColor.YELLOW</code> <code>This is BRIGHT YELLOW background!</code> <code>BgBrightColor.RED</code> <code>This is BRIGHT RED background!</code> <code>BgBrightColor.MAGENTA</code> <code>This is BRIGHT MAGENTA background!</code> <code>BgBrightColor.BLUE</code> <code>This is BRIGHT BLUE background!</code> <code>BgBrightColor.CYAN</code> <code>This is BRIGHT CYAN background!</code> <code>BgBrightColor.WHITE</code> <code>This is BRIGHT WHITE background!</code> <code>BgBrightColor.BLACK</code> <code>This is BRIGHT BLACK background!</code> - <code>BgBrightColor.DEFAULT</code> - - <code>BgBrightColor.OFF</code> - <p>Example:</p> Example Python<pre><code>from colorist import BgBrightColor\n\nprint(f\"I want {BgBrightColor.CYAN}CYAN{BgBrightColor.OFF} background color inside this paragraph\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% I want CYAN background color inside this paragraph</code></pre></p>","tags":["Documentation","Tutorial","Background Colors","Standard Colors"]},{"location":"reference/effects-and-styling/full-line/","title":"Full Line Text Functions for Effects and Styling","text":"","tags":["Documentation","Tutorial","Effects"]},{"location":"reference/effects-and-styling/full-line/#examples","title":"Examples","text":"Effect Full Text Function Example Bold <code>effect_bold(\"text\")</code> <code>This is BOLD</code> Dim <code>effect_dim(\"text\")</code> <code>This is DIMMED</code> Underline <code>effect_underline(\"text\")</code> <code>This is UNDERLINED</code> Blink <code>effect_blink(\"text\")</code> <code>This is BLINKING</code> Reverse <code>effect_reverse(\"text\")</code> <code>This is REVERSED</code> Hide <code>effect_hide(\"text\")</code> <code>This is HIDDEN</code>","tags":["Documentation","Tutorial","Effects"]},{"location":"reference/effects-and-styling/full-line/#functions","title":"Functions","text":"","tags":["Documentation","Tutorial","Effects"]},{"location":"reference/effects-and-styling/full-line/#colorist.print.effect.MkDocstringsWrapper.effect_blink","title":"<code>effect_blink(text, color=None)</code>","text":"<p>Prints full line of text with blink effect.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with blink effect.</p> required <code>color</code> <code>Color | BrightColor | ColorVGA | ColorRGB | ColorHSL | ColorHex | BgColor | BgBrightColor | BgColorVGA | BgColorRGB | BgColorHSL | BgColorHex | str | None</code> <p>Optionally add color to text.</p> <code>None</code> Example <pre><code>from colorist import effect_blink, BrightColor, BgColor\n\neffect_blink(\"This is BLINKING\")\neffect_blink(\"This is BLINKING\", BrightColor.YELLOW)\neffect_blink(\"This is BLINKING\", BgColor.GREEN)\neffect_blink(\"This is BLINKING\", BgColorRGB(70, 130, 180))\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BLINKING\n% This is BLINKING\n% This is BLINKING\n% This is BLINKING</code></pre>","tags":["Documentation","Tutorial","Effects"]},{"location":"reference/effects-and-styling/full-line/#colorist.print.effect.MkDocstringsWrapper.effect_bold","title":"<code>effect_bold(text, color=None)</code>","text":"<p>Prints full line of text with bold styling.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with bold styling.</p> required <code>color</code> <code>Color | BrightColor | ColorVGA | ColorRGB | ColorHSL | ColorHex | BgColor | BgBrightColor | BgColorVGA | BgColorRGB | BgColorHSL | BgColorHex | str | None</code> <p>Optionally add color to text.</p> <code>None</code> Example <pre><code>from colorist import effect_bold, Color, BgColor\n\neffect_bold(\"This is BOLD\")\neffect_bold(\"This is BOLD\", Color.BLUE)\neffect_bold(\"This is BOLD\", BgColor.RED)\neffect_bold(\"This is BOLD\", BgColorHSL(190, 2, 49))\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BOLD\n% This is BOLD\n% This is BOLD\n% This is BOLD</code></pre>","tags":["Documentation","Tutorial","Effects"]},{"location":"reference/effects-and-styling/full-line/#colorist.print.effect.MkDocstringsWrapper.effect_dim","title":"<code>effect_dim(text, color=None)</code>","text":"<p>Prints full line of text with dim styling.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with dim effect.</p> required <code>color</code> <code>Color | BrightColor | ColorVGA | ColorRGB | ColorHSL | ColorHex | BgColor | BgBrightColor | BgColorVGA | BgColorRGB | BgColorHSL | BgColorHex | str | None</code> <p>Optionally add color to text.</p> <code>None</code> Example <pre><code>from colorist import effect_dim, BrightColor, BgColor\n\neffect_dim(\"This is DIMMED\")\neffect_dim(\"This is DIMMED\", BrightColor.GREEN)\neffect_dim(\"This is DIMMED\", BgColor.MAGENTA)\neffect_dim(\"This is DIMMED\", ColorHex(\"#ff5733\"))\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is DIMMED\n% This is DIMMED\n% This is DIMMED\n% This is DIMMED</code></pre>","tags":["Documentation","Tutorial","Effects"]},{"location":"reference/effects-and-styling/full-line/#colorist.print.effect.MkDocstringsWrapper.effect_hide","title":"<code>effect_hide(text, color=None)</code>","text":"<p>Prints full line of text with hide effect.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with hide effect.</p> required <code>color</code> <code>Color | BrightColor | ColorVGA | ColorRGB | ColorHSL | ColorHex | BgColor | BgBrightColor | BgColorVGA | BgColorRGB | BgColorHSL | BgColorHex | str | None</code> <p>Optionally add color to text.</p> <code>None</code> Example <pre><code>from colorist import effect_hide, Color, BgColor\n\neffect_hide(\"This is HIDDEN\")\neffect_hide(\"This is HIDDEN\", Color.BLUE)\neffect_hide(\"This is HIDDEN\", BgColor.RED)\neffect_hide(\"This is HIDDEN\", BgColorHex(\"#99ff99\"))\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is HIDDEN\n% This is HIDDEN\n% This is HIDDEN\n% This is HIDDEN</code></pre>","tags":["Documentation","Tutorial","Effects"]},{"location":"reference/effects-and-styling/full-line/#colorist.print.effect.MkDocstringsWrapper.effect_reverse","title":"<code>effect_reverse(text, color=None)</code>","text":"<p>Prints full line of text with reversed foreground and background color effect.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with reverse effect.</p> required <code>color</code> <code>Color | BrightColor | ColorVGA | ColorRGB | ColorHSL | ColorHex | BgColor | BgBrightColor | BgColorVGA | BgColorRGB | BgColorHSL | BgColorHex | str | None</code> <p>Optionally add color to text.</p> <code>None</code> Example <pre><code>from colorist import effect_reverse, Color, BgColor\n\neffect_reverse(\"This is REVERSED\")\neffect_reverse(\"This is REVERSED\", Color.CYAN)\neffect_reverse(\"This is REVERSED\", BgColor.RED)\neffect_reverse(\"This is REVERSED\", ColorRGB(194, 145, 164))\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is REVERSED\n% This is REVERSED\n% This is REVERSED\n% This is REVERSED</code></pre>","tags":["Documentation","Tutorial","Effects"]},{"location":"reference/effects-and-styling/full-line/#colorist.print.effect.MkDocstringsWrapper.effect_underline","title":"<code>effect_underline(text, color=None)</code>","text":"<p>Prints full line of text with underline styling.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with underline styling.</p> required <code>color</code> <code>Color | BrightColor | ColorVGA | ColorRGB | ColorHSL | ColorHex | BgColor | BgBrightColor | BgColorVGA | BgColorRGB | BgColorHSL | BgColorHex | str | None</code> <p>Optionally add color to text.</p> <code>None</code> Example <pre><code>from colorist import effect_underline, Color, BgBrightColor\n\neffect_underline(\"This is UNDERLINED\")\neffect_underline(\"This is UNDERLINED\", Color.CYAN)\neffect_underline(\"This is UNDERLINED\", BgBrightColor.BLUE)\neffect_underline(\"This is UNDERLINED\", ColorHSL(60, 56, 43))\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is UNDERLINED\n% This is UNDERLINED\n% This is UNDERLINED\n% This is UNDERLINED</code></pre>","tags":["Documentation","Tutorial","Effects"]},{"location":"reference/effects-and-styling/mixed/","title":"Custom Text Effects and Styling","text":"","tags":["Documentation","Tutorial","Effects"]},{"location":"reference/effects-and-styling/mixed/#effect","title":"<code>Effect</code>","text":"<p>Enumerable class of all available effects.</p> <p>Options:</p> Effect Effect Code Reset Code Example Bold <code>Effect.BOLD</code> <code>Effect.BOLD_OFF</code> <code>This is BOLD</code> Dim <code>Effect.DIM</code> <code>Effect.DIM_OFF</code> <code>This is DIMMED</code> Underline <code>Effect.UNDERLINE</code> <code>Effect.UNDERLINE_OFF</code> <code>This is UNDERLINED</code> Blink <code>Effect.BLINK</code> <code>Effect.BLINK_OFF</code> <code>This is BLINKING</code> Reverse <code>Effect.REVERSE</code> <code>Effect.REVERSE_OFF</code> <code>This is REVERSED</code> Hide <code>Effect.HIDE</code> <code>Effect.HIDE_OFF</code> <code>This is HIDDEN</code> - - <code>Effect.OFF</code> - <p>Example:</p> Example Python<pre><code>from colorist import Effect\n\nprint(f\"I want {Effect.UNDERLINE}underlined text{Effect.UNDERLINE_OFF}\")\n\nprint(f\"I want {Effect.BOLD}emphasized text{Effect.BOLD_OFF}\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% I want underlined text\n% I want emphasized text</code></pre></p> <p>Tip</p> <p>Similar to <code>Color.OFF</code>, remember to turn off an effect with the relevant reset option (e.g <code>Effect.BOLD_OFF</code>, <code>Effect.DIM_OFF</code>, etc. or even just <code>Effect.OFF</code>) every time you want to revert back to the default terminal text style. Otherwise, the effect may spill over and into other terminal messages.</p>","tags":["Documentation","Tutorial","Effects"]},{"location":"reference/extended-colors/hex/","title":"Hex Colors","text":"<p>Disclaimer</p> <p>Not all terminals support 24-bit colors in RGB, HSL, or Hex. If your terminal does support such advanced colors, read on.</p>","tags":["Documentation","Tutorial","Extended Colors","Hex Colors"]},{"location":"reference/extended-colors/hex/#full-line-text-functions","title":"Full Line Text Functions","text":"","tags":["Documentation","Tutorial","Extended Colors","Hex Colors"]},{"location":"reference/extended-colors/hex/#colorist.print.foreground.hex.MkDocstringsWrapper.hex","title":"<code>hex(text, hex)</code>","text":"<p>Prints full line of text in Hex color.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required <code>hex</code> <code>str</code> <p>Hex color value with or without hashtag, for instance <code>#B4FBB8</code> or <code>B4FBB8</code>, <code>#B4F</code> or <code>B4F</code>.</p> required Example <pre><code>from colorist import hex\n\nhex(\"I want this text in coral Hex colors\", \"#ff7f50\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want this text in coral Hex colors</code></pre>","tags":["Documentation","Tutorial","Extended Colors","Hex Colors"]},{"location":"reference/extended-colors/hex/#colorist.print.background.hex.MkDocstringsWrapper.bg_hex","title":"<code>bg_hex(text, hex)</code>","text":"<p>Prints full line of text on colored background defined in Hex color.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required <code>hex</code> <code>str</code> <p>Hex color value with or without hashtag, for instance <code>#B4FBB8</code> or <code>B4FBB8</code>, <code>#B4F</code> or <code>B4F</code>.</p> required Example <pre><code>from colorist import bg_hex\n\nbg_hex(\"I want this background in coral Hex colors\", \"#ff7f50\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want this background in coral Hex colors</code></pre>","tags":["Documentation","Tutorial","Extended Colors","Hex Colors"]},{"location":"reference/extended-colors/hex/#custom-string-styling","title":"Custom String Styling","text":"","tags":["Documentation","Tutorial","Extended Colors","Hex Colors"]},{"location":"reference/extended-colors/hex/#colorhexhex","title":"<code>ColorHex(hex)</code>","text":"<p>Class for custom foreground text defined in Hex color.</p> <p>Parameters:</p> Name Type Description Default <code>hex</code> <code>str</code> <p>Hex color value with or without hashtag, for instance <code>#B4FBB8</code> or <code>B4FBB8</code>, <code>#B4F</code> or <code>B4F</code>.</p> required Example <pre><code>from colorist import ColorHex\n\nwatermelon_red = ColorHex(\"#ff5733\")\n\nprint(f\"I want to use {watermelon_red}WATERMELON RED{watermelon_red.OFF} color inside this paragraph\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want to use WATERMELON RED color inside this paragraph</code></pre>","tags":["Documentation","Tutorial","Extended Colors","Hex Colors"]},{"location":"reference/extended-colors/hex/#bgcolorhexhex","title":"<code>BgColorHex(hex)</code>","text":"<p>Class for custom background defined in Hex color.</p> <p>Parameters:</p> Name Type Description Default <code>hex</code> <code>str</code> <p>Hex color value with or without hashtag, for instance <code>#B4FBB8</code> or <code>B4FBB8</code>, <code>#B4F</code> or <code>B4F</code>.</p> required Example <pre><code>from colorist import BgColorHex\n\nbg_mint_green = BgColorHex(\"#99ff99\")\n\nprint(f\"I want to use {bg_mint_green}MINT GREEN{bg_mint_green.OFF} background color inside this paragraph\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want to use MINT GREEN background color inside this paragraph</code></pre>","tags":["Documentation","Tutorial","Extended Colors","Hex Colors"]},{"location":"reference/extended-colors/hsl/","title":"HSL Colors","text":"<p>Disclaimer</p> <p>Not all terminals support 24-bit colors in RGB, HSL, or Hex. If your terminal does support such advanced colors, read on.</p>","tags":["Documentation","Tutorial","Extended Colors","HSL Colors"]},{"location":"reference/extended-colors/hsl/#full-line-text-functions","title":"Full Line Text Functions","text":"","tags":["Documentation","Tutorial","Extended Colors","HSL Colors"]},{"location":"reference/extended-colors/hsl/#colorist.print.foreground.hsl.MkDocstringsWrapper.hsl","title":"<code>hsl(text, hue, saturation, lightness)</code>","text":"<p>Prints full line of custom HSL-colored text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required <code>hue</code> <code>float</code> <p>Number between <code>0</code> and <code>360</code> degrees.</p> required <code>saturation</code> <code>float</code> <p>Percentage between <code>0</code> and <code>100</code> %.</p> required <code>lightness</code> <code>float</code> <p>Percentage between <code>0</code> and <code>100</code> %.</p> required Example <pre><code>from colorist import hsl\n\nhsl(\"I want this text in green HSL colors\", 120, 50, 50)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want this text in green HSL colors</code></pre>","tags":["Documentation","Tutorial","Extended Colors","HSL Colors"]},{"location":"reference/extended-colors/hsl/#colorist.print.background.hsl.MkDocstringsWrapper.bg_hsl","title":"<code>bg_hsl(text, hue, saturation, lightness)</code>","text":"<p>Prints full line of text on custom HSL-colored background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required <code>hue</code> <code>float</code> <p>Number between <code>0</code> and <code>360</code> degrees.</p> required <code>saturation</code> <code>float</code> <p>Percentage between <code>0</code> and <code>100</code> %.</p> required <code>lightness</code> <code>float</code> <p>Percentage between <code>0</code> and <code>100</code> %.</p> required Example <pre><code>from colorist import bg_hsl\n\nbg_hsl(\"I want this background in green HSL colors\", 120, 50, 50)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want this background in green HSL colors</code></pre>","tags":["Documentation","Tutorial","Extended Colors","HSL Colors"]},{"location":"reference/extended-colors/hsl/#custom-string-styling","title":"Custom String Styling","text":"","tags":["Documentation","Tutorial","Extended Colors","HSL Colors"]},{"location":"reference/extended-colors/hsl/#colorhslhue-saturation-lightness","title":"<code>ColorHSL(hue, saturation, lightness)</code>","text":"<p>Class for custom HSL foreground text color.</p> <p>Parameters:</p> Name Type Description Default <code>hue</code> <code>float</code> <p>Number between <code>0</code> and <code>360</code> degrees.</p> required <code>saturation</code> <code>float</code> <p>Percentage between <code>0</code> and <code>100</code> %.</p> required <code>lightness</code> <code>float</code> <p>Percentage between <code>0</code> and <code>100</code> %.</p> required Example <pre><code>from colorist import ColorHSL\n\nmustard_green = ColorHSL(60, 56, 43)\n\nprint(f\"I want to use {mustard_green}MUSTARD GREEN{mustard_green.OFF} color inside this paragraph\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want to use MUSTARD GREEN color inside this paragraph</code></pre>","tags":["Documentation","Tutorial","Extended Colors","HSL Colors"]},{"location":"reference/extended-colors/hsl/#bgcolorhslhue-saturation-lightness","title":"<code>BgColorHSL(hue, saturation, lightness)</code>","text":"<p>Class for custom HSL background color.</p> <p>Parameters:</p> Name Type Description Default <code>hue</code> <code>float</code> <p>Number between <code>0</code> and <code>360</code> degrees.</p> required <code>saturation</code> <code>float</code> <p>Percentage between <code>0</code> and <code>100</code> %.</p> required <code>lightness</code> <code>float</code> <p>Percentage between <code>0</code> and <code>100</code> %.</p> required Example <pre><code>from colorist import BgColorHSL\n\nbg_steel_gray = BgColorHSL(190, 2, 49)\n\nprint(f\"I want to use {bg_steel_gray}STEEL GRAY{bg_steel_gray.OFF} background color inside this paragraph\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want to use STEEL GRAY background color inside this paragraph</code></pre>","tags":["Documentation","Tutorial","Extended Colors","HSL Colors"]},{"location":"reference/extended-colors/rgb/","title":"RGB Colors","text":"<p>Disclaimer</p> <p>Not all terminals support 24-bit colors in RGB, HSL, or Hex. If your terminal does support such advanced colors, read on.</p>","tags":["Documentation","Tutorial","Extended Colors","RGB Colors"]},{"location":"reference/extended-colors/rgb/#full-line-text-functions","title":"Full Line Text Functions","text":"","tags":["Documentation","Tutorial","Extended Colors","RGB Colors"]},{"location":"reference/extended-colors/rgb/#colorist.print.foreground.rgb.MkDocstringsWrapper.rgb","title":"<code>rgb(text, red, green, blue)</code>","text":"<p>Prints full line of custom RGB-colored text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required <code>red</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required <code>green</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required <code>blue</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required Example <pre><code>from colorist import rgb\n\nrgb(\"I want this text in blue RGB colors\", 0, 128, 255)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want this text in blue RGB colors</code></pre>","tags":["Documentation","Tutorial","Extended Colors","RGB Colors"]},{"location":"reference/extended-colors/rgb/#colorist.print.background.rgb.MkDocstringsWrapper.bg_rgb","title":"<code>bg_rgb(text, red, green, blue)</code>","text":"<p>Prints full line of text on custom RGB-colored background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required <code>red</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required <code>green</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required <code>blue</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required Example <pre><code>from colorist import bg_rgb\n\nbg_rgb(\"I want this background in blue RGB colors\", 0, 128, 255)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want this background in blue RGB colors</code></pre>","tags":["Documentation","Tutorial","Extended Colors","RGB Colors"]},{"location":"reference/extended-colors/rgb/#custom-string-styling","title":"Custom String Styling","text":"","tags":["Documentation","Tutorial","Extended Colors","RGB Colors"]},{"location":"reference/extended-colors/rgb/#colorrgbred-green-blue","title":"<code>ColorRGB(red, green, blue)</code>","text":"<p>Class for custom 16-bit RGB foreground text color.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required <code>green</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required <code>blue</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required Example <pre><code>from colorist import ColorRGB\n\ndusty_pink = ColorRGB(194, 145, 164)\n\nprint(f\"I want to use {dusty_pink}DUSTY PINK{dusty_pink.OFF} color inside this paragraph\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want to use DUSTY PINK color inside this paragraph</code></pre>","tags":["Documentation","Tutorial","Extended Colors","RGB Colors"]},{"location":"reference/extended-colors/rgb/#bgcolorrgbred-green-blue","title":"<code>BgColorRGB(red, green, blue)</code>","text":"<p>Class for custom 16-bit RGB background color instances.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required <code>green</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required <code>blue</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required Example <pre><code>from colorist import BgColorRGB\n\nbg_steel_blue = BgColorRGB(70, 130, 180)\n\nprint(f\"I want to use {bg_steel_blue}STEEL BLUE{bg_steel_blue.OFF} background color inside this paragraph\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want to use STEEL BLUE background color inside this paragraph</code></pre>","tags":["Documentation","Tutorial","Extended Colors","RGB Colors"]},{"location":"reference/extended-colors/vga/","title":"VGA Colors","text":"<p>Disclaimer</p> <p>Not all terminals support 8-bit VGA colors. If your terminal does support such advanced colors, read on.</p>","tags":["Documentation","Tutorial","Extended Colors","VGA Colors"]},{"location":"reference/extended-colors/vga/#full-line-text-functions","title":"Full Line Text Functions","text":"","tags":["Documentation","Tutorial","Extended Colors","VGA Colors"]},{"location":"reference/extended-colors/vga/#colorist.print.foreground.vga.MkDocstringsWrapper.vga","title":"<code>vga(text, vga)</code>","text":"<p>Prints full line of 8-bit VGA-colored text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required <code>vga</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required Example <pre><code>from colorist import vga\n\nvga(\"I want this text in blue VGA colors\", 33)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want this text in blue VGA colors</code></pre>","tags":["Documentation","Tutorial","Extended Colors","VGA Colors"]},{"location":"reference/extended-colors/vga/#colorist.print.background.vga.MkDocstringsWrapper.bg_vga","title":"<code>bg_vga(text, vga)</code>","text":"<p>Prints full line of text on 8-bit VGA-colored background.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed on colored background.</p> required <code>vga</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required Example <pre><code>from colorist import vga\n\nbg_vga(\"I want this background in blue VGA colors\", 33)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want this background in blue VGA colors</code></pre>","tags":["Documentation","Tutorial","Extended Colors","VGA Colors"]},{"location":"reference/extended-colors/vga/#custom-string-styling","title":"Custom String Styling","text":"","tags":["Documentation","Tutorial","Extended Colors","VGA Colors"]},{"location":"reference/extended-colors/vga/#colorvgavga","title":"<code>ColorVGA(vga)</code>","text":"<p>Class for custom 8-bit VGA foreground text color.</p> <p>Parameters:</p> Name Type Description Default <code>vga</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required Example <pre><code>from colorist import ColorVGA\n\nlime_green = ColorVGA(120)\n\nprint(f\"I want to use {lime_green}LIME GREEN{lime_green.OFF} color inside this paragraph\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want to use LIME GREEN color inside this paragraph</code></pre>","tags":["Documentation","Tutorial","Extended Colors","VGA Colors"]},{"location":"reference/extended-colors/vga/#bgcolorvgavga","title":"<code>BgColorVGA(vga)</code>","text":"<p>Class for custom 8-bit VGA background color instances.</p> <p>Parameters:</p> Name Type Description Default <code>vga</code> <code>int</code> <p>Number between <code>0</code> and <code>255</code>.</p> required Example <pre><code>from colorist import BgColorVGA\n\nbg_lime_green = BgColorVGA(120)\n\nprint(f\"I want to use {bg_lime_green}LIME GREEN{bg_lime_green.OFF} background color inside this paragraph\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want to use LIME GREEN background color inside this paragraph</code></pre>","tags":["Documentation","Tutorial","Extended Colors","VGA Colors"]},{"location":"reference/text-colors/full-line/","title":"Full Line Text Functions for Foreground Colors","text":"","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#color-maps","title":"Color Maps","text":"","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#normal-colors","title":"Normal Colors","text":"Color Full Text Function Example <code>green(\"text\")</code> <code>This is GREEN!</code> <code>yellow(\"text\")</code> <code>This is YELLOW!</code> <code>red(\"text\")</code> <code>This is RED!</code> <code>magenta(\"text\")</code> <code>This is MAGENTA!</code> <code>blue(\"text\")</code> <code>This is BLUE!</code> <code>cyan(\"text\")</code> <code>This is CYAN!</code> <code>white(\"text\")</code> <code>This is WHITE!</code> <code>black(\"text\")</code> <code>This is BLACK!</code> Example Python<pre><code>from colorist import green, yellow, red\n\ngreen(\"This is GREEN!\")\nyellow(\"This is YELLOW!\")\nred(\"This is RED!\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% This is GREEN!\n% This is YELLOW!\n% This is RED!</code></pre></p>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#bright-colors","title":"Bright Colors","text":"Color Full Text Function Example <code>bright_green(\"text\")</code> <code>This is BRIGHT GREEN!</code> <code>bright_yellow(\"text\")</code> <code>This is BRIGHT YELLOW!</code> <code>bright_red(\"text\")</code> <code>This is BRIGHT RED!</code> <code>bright_magenta(\"text\")</code> <code>This is BRIGHT MAGENTA!</code> <code>bright_blue(\"text\")</code> <code>This is BRIGHT BLUE!</code> <code>bright_cyan(\"text\")</code> <code>This is BRIGHT CYAN!</code> <code>bright_white(\"text\")</code> <code>This is BRIGHT WHITE!</code> <code>bright_black(\"text\")</code> <code>This is BRIGHT BLACK!</code> <p>Limited Support for Bright Colors</p> <p>Note that bright colors are supported by many terminals, yet not all as bright colors aren't part of the standard set of ANSI colors.</p> Example Python<pre><code>from colorist import bright_green, bright_yellow, bright_red\n\nbright_green(\"This is BRIGHT GREEN!\")\nbright_yellow(\"This is BRIGHT YELLOW!\")\nbright_red(\"This is BRIGHT RED!\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% This is BRIGHT GREEN!\n% This is BRIGHT YELLOW!\n% This is BRIGHT RED!</code></pre></p>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#functions","title":"Functions","text":"","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.color.MkDocstringsWrapper.black","title":"<code>black(text)</code>","text":"<p>Prints full line of black text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import black\n\nblack(\"This is BLACK!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BLACK!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.color.MkDocstringsWrapper.blue","title":"<code>blue(text)</code>","text":"<p>Prints full line of blue text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import blue\n\nblue(\"This is BLUE!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BLUE!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.color.MkDocstringsWrapper.cyan","title":"<code>cyan(text)</code>","text":"<p>Prints full line of cyan text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import cyan\n\ncyan(\"This is CYAN!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is CYAN!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.color.MkDocstringsWrapper.green","title":"<code>green(text)</code>","text":"<p>Prints full line of green text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import green\n\ngreen(\"This is GREEN!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is GREEN!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.color.MkDocstringsWrapper.magenta","title":"<code>magenta(text)</code>","text":"<p>Prints full line of magenta text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import magenta\n\nmagenta(\"This is MAGENTA!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is MAGENTA!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.color.MkDocstringsWrapper.red","title":"<code>red(text)</code>","text":"<p>Prints full line of red text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import red\n\nred(\"This is RED!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is RED!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.color.MkDocstringsWrapper.white","title":"<code>white(text)</code>","text":"<p>Prints full line of white text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import white\n\nwhite(\"This is WHITE!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is WHITE!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.color.MkDocstringsWrapper.yellow","title":"<code>yellow(text)</code>","text":"<p>Prints full line of yellow text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import yellow\n\nyellow(\"This is YELLOW!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is YELLOW!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.bright_color.MkDocstringsWrapper.bright_black","title":"<code>bright_black(text)</code>","text":"<p>Prints full line of bright black text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import bright_black\n\nbright_black(\"This is BRIGHT BLACK!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT BLACK!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.bright_color.MkDocstringsWrapper.bright_blue","title":"<code>bright_blue(text)</code>","text":"<p>Prints full line of bright blue text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import bright_blue\n\nbright_blue(\"This is BRIGHT BLUE!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT BLUE!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.bright_color.MkDocstringsWrapper.bright_cyan","title":"<code>bright_cyan(text)</code>","text":"<p>Prints full line of bright cyan text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import bright_cyan\n\nbright_cyan(\"This is BRIGHT CYAN!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT CYAN!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.bright_color.MkDocstringsWrapper.bright_green","title":"<code>bright_green(text)</code>","text":"<p>Prints full line of bright green text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import bright_green\n\nbright_green(\"This is BRIGHT GREEN!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT GREEN!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.bright_color.MkDocstringsWrapper.bright_magenta","title":"<code>bright_magenta(text)</code>","text":"<p>Prints full line of bright magenta text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import bright_magenta\n\nbright_magenta(\"This is BRIGHT MAGENTA!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT MAGENTA!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.bright_color.MkDocstringsWrapper.bright_red","title":"<code>bright_red(text)</code>","text":"<p>Prints full line of bright red text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import bright_red\n\nbright_red(\"This is BRIGHT RED!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT RED!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.bright_color.MkDocstringsWrapper.bright_white","title":"<code>bright_white(text)</code>","text":"<p>Prints full line of bright white text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import bright_white\n\nbright_white(\"This is BRIGHT WHITE!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT WHITE!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/full-line/#colorist.print.foreground.bright_color.MkDocstringsWrapper.bright_yellow","title":"<code>bright_yellow(text)</code>","text":"<p>Prints full line of bright yellow text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be printed with color.</p> required Example <pre><code>from colorist import bright_yellow\n\nbright_yellow(\"This is BRIGHT YELLOW!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BRIGHT YELLOW!</code></pre>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/mixed/","title":"Custom String Styling for Foreground Text Colors","text":"","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/mixed/#color","title":"<code>Color</code>","text":"<p>Enumerable class of all available standard text colors.</p> <p>Options:</p> Color Color Code Example <code>Color.GREEN</code> <code>This is GREEN!</code> <code>Color.YELLOW</code> <code>This is YELLOW!</code> <code>Color.RED</code> <code>This is RED!</code> <code>Color.MAGENTA</code> <code>This is MAGENTA!</code> <code>Color.BLUE</code> <code>This is BLUE!</code> <code>Color.CYAN</code> <code>This is CYAN!</code> <code>Color.WHITE</code> <code>This is WHITE!</code> <code>Color.BLACK</code> <code>This is BLACK!</code> - <code>Color.DEFAULT</code> - - <code>Color.OFF</code> - <p>Example:</p> Example Python<pre><code>from colorist import Color\n\nprint(f\"I want {Color.RED}RED{Color.OFF} color inside this paragraph\")\n\nprint(f\"Both {Color.GREEN}GREEN{Color.OFF} and {Color.YELLOW}YELLOW{Color.OFF} are nice colors\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% I want RED color inside this paragraph\n% Both GREEN and YELLOW are nice colors</code></pre></p> <p>Tip</p> <p>Remember to turn off a color with <code>Color.OFF</code> or <code>BrightColor.OFF</code> every time you want to revert back to the default terminal text style. Otherwise, the effect may spill over and into other terminal messages.</p>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"reference/text-colors/mixed/#brightcolor","title":"<code>BrightColor</code>","text":"<p>Enumerable class of all available standard bright text colors.</p> <p>Options:</p> Color Color Code Example <code>BrightColor.GREEN</code> <code>This is BRIGHT GREEN!</code> <code>BrightColor.YELLOW</code> <code>This is BRIGHT YELLOW!</code> <code>BrightColor.RED</code> <code>This is BRIGHT RED!</code> <code>BrightColor.MAGENTA</code> <code>This is BRIGHT MAGENTA!</code> <code>BrightColor.BLUE</code> <code>This is BRIGHT BLUE!</code> <code>BrightColor.CYAN</code> <code>This is BRIGHT CYAN!</code> <code>BrightColor.WHITE</code> <code>This is BRIGHT WHITE!</code> <code>BrightColor.BLACK</code> <code>This is BRIGHT BLACK!</code> - <code>BrightColor.DEFAULT</code> - - <code>BrightColor.OFF</code> - <p>Example:</p> Example Python<pre><code>from colorist import BrightColor\n\nprint(f\"I want {BrightColor.CYAN}CYAN{BrightColor.OFF} color inside this paragraph\")\n</code></pre> <p>How it appears in the terminal:</p> <p><pre><code>% I want CYAN color inside this paragraph</code></pre></p>","tags":["Documentation","Tutorial","Text Colors","Foreground Colors","Standard Colors"]},{"location":"user-guide/","title":"User Guide \ud83d\udc68\u200d\ud83d\udd27","text":"<p>Colorist is a lightweight package and is intended to be easy to use. Find tutorials and background information in this section.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/#quick-links","title":"Quick Links","text":"","tags":["Features","Tutorial"]},{"location":"user-guide/#normal-colors","title":"Normal Colors","text":"<p>Use the standard palette to add color to both text and background.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/#bright-colors","title":"Bright Colors","text":"<p>The bright colors extend the standard palette and are supported by most terminals.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/#effects","title":"Effects","text":"<p>Apply text styling and animations to your terminal output.</p>","tags":["Features","Tutorial"]},{"location":"user-guide/#extended-color-space","title":"Extended Color Space","text":"<p>If your terminal supports an extended color space, learn how to define colors as:</p> <ul> <li>VGA</li> <li>RGB</li> <li>HSL</li> <li>Hex</li> </ul> <p>Become a Sponsor</p> <p>If you find this project helpful, please consider supporting its development. Your donations will help keep it alive and growing. Every contribution, no matter the size, makes a difference.</p> <p>Donate on GitHub Sponsors</p> <p>Thank you for your support! \ud83d\ude4c</p>","tags":["Features","Tutorial"]},{"location":"user-guide/effects-and-styling/","title":"How to Add Effects and Styling to Text","text":"","tags":["Features","Tutorial","Effects"]},{"location":"user-guide/effects-and-styling/#full-line-text-functions","title":"Full Line Text Functions","text":"","tags":["Features","Tutorial","Effects"]},{"location":"user-guide/effects-and-styling/#examples","title":"Examples","text":"<p>In addition to colors, Colorist can also add effects when you print text in the terminal. How to print a full line of text with effects:</p> Python<pre><code>from colorist import effect_blink\n\neffect_blink(\"This is BLINKING!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is BLINKING!</code></pre>","tags":["Features","Tutorial","Effects"]},{"location":"user-guide/effects-and-styling/#mixing-effects-and-colors","title":"Mixing Effects and Colors","text":"<p>This can also be combined with an optional color:</p> Python<pre><code>from colorist import Color, effect_blink\n\neffect_blink(\"CYAN and BLINKING!\", Color.CYAN)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% CYAN and BLINKING!</code></pre>","tags":["Features","Tutorial","Effects"]},{"location":"user-guide/effects-and-styling/#cheat-sheet","title":"Cheat Sheet","text":"Effect Full Text Function Example Bold <code>effect_bold(\"text\")</code> <code>This is BOLD</code> Dim <code>effect_dim(\"text\")</code> <code>This is DIMMED</code> Underline <code>effect_underline(\"text\")</code> <code>This is UNDERLINED</code> Blink <code>effect_blink(\"text\")</code> <code>This is BLINKING</code> Reverse <code>effect_reverse(\"text\")</code> <code>This is REVERSED</code> Hide <code>effect_hide(\"text\")</code> <code>This is HIDDEN</code>","tags":["Features","Tutorial","Effects"]},{"location":"user-guide/effects-and-styling/#custom-string-styling","title":"Custom String Styling","text":"","tags":["Features","Tutorial","Effects"]},{"location":"user-guide/effects-and-styling/#examples_1","title":"Examples","text":"<p>How to customize terminal messages and change effect inside a paragraph:</p> Python<pre><code>from colorist import Effect\n\nprint(f\"I want {Effect.UNDERLINE}underlined text{Effect.UNDERLINE_OFF}\")\n\nprint(f\"I want {Effect.BOLD}emphasized text{Effect.BOLD_OFF}\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want underlined text\n% I want emphasized text</code></pre>","tags":["Features","Tutorial","Effects"]},{"location":"user-guide/effects-and-styling/#mixing-effects-and-colors_1","title":"Mixing Effects and Colors","text":"<p>Effects can also be mixed with colors:</p> Python<pre><code>from colorist import Color, Effect\n\nprint(f\"I want both {Color.RED}colored and {Effect.BLINK}blinking{Effect.BLINK_OFF} text{Color.OFF} inside this paragraph\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want both colored and blinking text inside this paragraph</code></pre> <p>Tip</p> <p>Similar to <code>Color.OFF</code>, remember to turn off an effect with the relevant reset option (e.g <code>Effect.BOLD_OFF</code>, <code>Effect.DIM_OFF</code>, etc. or even just <code>Effect.OFF</code>) every time you want to revert back to the default terminal text style. Otherwise, the effect may spill over and into other terminal messages.</p>","tags":["Features","Tutorial","Effects"]},{"location":"user-guide/effects-and-styling/#cheat-sheet_1","title":"Cheat Sheet","text":"Effect Effect Code Reset Code Example Bold <code>Effect.BOLD</code> <code>Effect.BOLD_OFF</code> <code>This is BOLD</code> Dim <code>Effect.DIM</code> <code>Effect.DIM_OFF</code> <code>This is DIMMED</code> Underline <code>Effect.UNDERLINE</code> <code>Effect.UNDERLINE_OFF</code> <code>This is UNDERLINED</code> Blink <code>Effect.BLINK</code> <code>Effect.BLINK_OFF</code> <code>This is BLINKING</code> Reverse <code>Effect.REVERSE</code> <code>Effect.REVERSE_OFF</code> <code>This is REVERSED</code> Hide <code>Effect.HIDE</code> <code>Effect.HIDE_OFF</code> <code>This is HIDDEN</code> - - <code>Effect.OFF</code> -","tags":["Features","Tutorial","Effects"]},{"location":"user-guide/compatibility/backwards-compatible-string-formats/","title":"How to Use Backwards Compatible String Formatting","text":"","tags":["Features","Tutorial"]},{"location":"user-guide/compatibility/backwards-compatible-string-formats/#f-strings-sometimes-are-not-supported","title":"F-Strings Sometimes Are Not Supported","text":"<p>Imagine that you want this printed in the terminal:</p> <pre><code>% I want RED color</code></pre> <p>Now that Colorist is designed to support Python 3.10 and later versions, it's often easier and more readable to use f-strings to add color to your text:</p> Python<pre><code>from colorist import Color\n\nprint(f\"I want {Color.RED}RED{Color.OFF} color\")\n</code></pre> <p>But as f-strings were introduced in Python 3.6 and therefore aren't supported in earlier versions, what are the alternatives?</p>","tags":["Features","Tutorial"]},{"location":"user-guide/compatibility/backwards-compatible-string-formats/#backwards-compatible-alternatives","title":"Backwards Compatible Alternatives","text":"<p>Instead, you can use string formatting with <code>str.format()</code> or concatenation with <code>+</code>. All variations yield the same result as before:</p> <pre><code>% I want RED color</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/compatibility/backwards-compatible-string-formats/#string-formatting","title":"String Formatting","text":"<p>Here's how you can use string formatting with <code>str.format()</code>:</p> Python<pre><code>from colorist import Color\n\nprint(\"I want {0}RED{1} color\".format(Color.RED, Color.OFF))\n</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/compatibility/backwards-compatible-string-formats/#string-concatenation","title":"String Concatenation","text":"<p>Here's how you can use string concatenation with <code>+</code>:</p> Python<pre><code>from colorist import Color\n\nprint(\"I want \" + Color.RED + \"RED\" + Color.OFF + \" color\")\n</code></pre>","tags":["Features","Tutorial"]},{"location":"user-guide/compatibility/terminal-support/","title":"Supported Colors and Styles by Terminals","text":"","tags":["Documentation"]},{"location":"user-guide/compatibility/terminal-support/#limited-support-for-ansi-escape-codes","title":"Limited Support for ANSI Escape Codes","text":"<p>Colorist is based on ANSI escape codes, a standard that defines colors, styling, and effects for text in terminal windows. Note that most terminals support all color options, but not all.</p>","tags":["Documentation"]},{"location":"user-guide/compatibility/terminal-support/#overview","title":"Overview","text":"<p>Generally, the features of Colorist are supported in these categories:</p> Category Supported By Colorist Options<sup>1</sup> Standard ANSI colors and effects  Almost all terminals <code>Color</code>, <code>BgColor</code>, <code>Effect</code> Non-standard ANSI, bright, and 8-bit VGA colors  Most terminals <code>BrightColor</code>, <code>BgBrightColor</code>, <code>ColorVGA</code>, <code>BgColorVGA</code> Advanced ANSI colors such as 24-bit RGB colors  Some terminals <code>ColorRGB</code>, <code>BgColorRGB</code>, <code>ColorHSL</code>, <code>BgColorHSL</code>, <code>ColorHex</code>, <code>BgColorHex</code> <p>Refer to the terminal's documentation to see if it supports extended color palettes.</p> <ol> <li> <p>Only custom string styling methods are mentioned in this overview. However, this similarly applies to the respective full text functions. For instance <code>vga()</code> for <code>ColorVGA</code>, <code>bg_vga()</code> for <code>BgColorVGA</code>,  <code>rgb()</code> for <code>ColorRGB</code>, <code>bg_rgb()</code> for <code>BgColorRGB</code>, etc.\u00a0\u21a9</p> </li> </ol>","tags":["Documentation"]},{"location":"user-guide/extended-colors/hex/","title":"Hex Colors","text":"","tags":["Features","Tutorial","Extended Colors","Hex Colors"]},{"location":"user-guide/extended-colors/hex/#what-are-hex-colors","title":"What are Hex Colors?","text":"<p>The 24-bit Hex color model covers over 16 million colors, and each color can be defined with a code in hexadecimal, for instance <code>#00aaff</code> or sometimes shortened to <code>#0af</code>, that can be broken down into a RGB value:</p> Hex Code <code>00</code> <code>aa</code> <code>ff</code> RGB value <code>0</code> <code>170</code> <code>255</code> Channel Red Green Blue <p>Disclaimer</p> <p>Not all terminals support 24-bit colors in RGB, HSL, or Hex. If your terminal does support such advanced colors, read on.</p>","tags":["Features","Tutorial","Extended Colors","Hex Colors"]},{"location":"user-guide/extended-colors/hex/#full-line-text-functions","title":"Full Line Text Functions","text":"<p>Try the <code>hex()</code> and <code>bg_hex()</code> methods for a full line of colored text. Allowed Hex values are, for instance, <code>#00aaff</code> or <code>#0af</code>, alternatively without the hash sign as <code>00aaff</code> or <code>0af</code>.</p> <p>Example:</p> Python<pre><code>from colorist import hex, bg_hex\n\nhex(\"I want this text in coral Hex colors\", \"#ff7f50\")\nbg_hex(\"I want this background in coral Hex colors\", \"#ff7f50\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want this text in coral Hex colors\n% I want this background in coral Hex colors</code></pre>","tags":["Features","Tutorial","Extended Colors","Hex Colors"]},{"location":"user-guide/extended-colors/hex/#custom-string-styling","title":"Custom String Styling","text":"<p>Or customize the styling of text and background with the <code>ColorHex()</code> and <code>BgColorHex()</code> classes:</p> Python<pre><code>from colorist import ColorHex, BgColorHex\n\nwatermelon_red = ColorHex(\"#ff5733\")\nbg_mint_green = BgColorHex(\"#99ff99\")\n\nprint(f\"I want to use {watermelon_red}WATERMELON RED{watermelon_red.OFF}...\")\nprint(f\"... and {bg_mint_green}MINT GREEN{bg_mint_green.OFF} colors\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want to use WATERMELON RED...\n% ... and MINT GREEN colors</code></pre>","tags":["Features","Tutorial","Extended Colors","Hex Colors"]},{"location":"user-guide/extended-colors/hsl/","title":"HSL Colors","text":"","tags":["Features","Tutorial","Extended Colors","HSL Colors"]},{"location":"user-guide/extended-colors/hsl/#what-are-hsl-colors","title":"What are HSL Colors?","text":"<p>The 24-bit HSL color model covers over 16 million colors, and each color can be defined as hue, saturation, and lightness:</p> Parameter Hue Saturation Lightness Allowed values <code>0</code>-<code>360</code> degrees <code>0</code>-<code>100</code> % <code>0</code>-<code>100</code> % Description Deegree on the color wheel. Intensity of the color. Brightness of the color. <p>Disclaimer</p> <p>Not all terminals support 24-bit colors in RGB, HSL, or Hex. If your terminal does support such advanced colors, read on.</p>","tags":["Features","Tutorial","Extended Colors","HSL Colors"]},{"location":"user-guide/extended-colors/hsl/#full-line-text-functions","title":"Full Line Text Functions","text":"<p>You can output colors in HSL with the <code>hsl()</code> and <code>bg_hsl()</code> methods. The value for hue can be between <code>0</code>-<code>360</code> degrees, while saturation and lightness can be a percentage between <code>0</code>-<code>100</code> %:</p> <p>Example:</p> Python<pre><code>from colorist import hsl, bg_hsl\n\nhsl(\"I want this text in green HSL colors\", 120, 50, 50)\nbg_hsl(\"I want this background in green HSL colors\", 120, 50, 50)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want this text in green HSL colors\n% I want this background in green HSL colors</code></pre>","tags":["Features","Tutorial","Extended Colors","HSL Colors"]},{"location":"user-guide/extended-colors/hsl/#custom-string-styling","title":"Custom String Styling","text":"<p>Or customize the styling of text and background with the <code>ColorHSL()</code> and <code>BgColorHSL()</code> classes:</p> Python<pre><code>from colorist import ColorHSL, BgColorHSL\n\nmustard_green = ColorHSL(60, 56, 43)\nbg_steel_gray = BgColorHSL(190, 2, 49)\n\nprint(f\"I want to use {mustard_green}MUSTARD GREEN{mustard_green.OFF}...\")\nprint(f\"... and {bg_steel_gray}STEEL GRAY{bg_steel_gray.OFF} colors\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want to use MUSTARD GREEN...\n% ... and STEEL GRAY colors</code></pre>","tags":["Features","Tutorial","Extended Colors","HSL Colors"]},{"location":"user-guide/extended-colors/rgb/","title":"RGB Colors","text":"","tags":["Features","Tutorial","Extended Colors","RGB Colors"]},{"location":"user-guide/extended-colors/rgb/#what-are-rgb-colors","title":"What are RGB Colors?","text":"<p>The 24-bit RGB color model covers over 16 million colors, and each color can be defined as red, green, and blue:</p> Channel Red Green Blue Allowed values <code>0-255</code> <code>0-255</code> <code>0-255</code> <p>Disclaimer</p> <p>Not all terminals support 24-bit colors in RGB, HSL, or Hex. If your terminal does support such advanced colors, read on.</p>","tags":["Features","Tutorial","Extended Colors","RGB Colors"]},{"location":"user-guide/extended-colors/rgb/#full-line-text-functions","title":"Full Line Text Functions","text":"<p>Try the <code>rgb()</code> and <code>bg_rgb()</code> methods for a full line of colored text. The values for red, green, blue can be an integer between <code>0</code>-<code>255</code>.</p> <p>Example:</p> Python<pre><code>from colorist import rgb, bg_rgb\n\nrgb(\"I want this text in blue RGB colors\", 0, 128, 255)\nbg_rgb(\"I want this background in blue RGB colors\", 0, 128, 255)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want this text in blue RGB colors\n% I want this background in blue RGB colors</code></pre>","tags":["Features","Tutorial","Extended Colors","RGB Colors"]},{"location":"user-guide/extended-colors/rgb/#custom-string-styling","title":"Custom String Styling","text":"<p>Or customize the styling of text and background with the <code>ColorRGB()</code> and <code>BgColorRGB()</code> classes:</p> Python<pre><code>from colorist import ColorRGB, BgColorRGB\n\ndusty_pink = ColorRGB(194, 145, 164)\nbg_steel_blue = BgColorRGB(70, 130, 180)\n\nprint(f\"I want to use {dusty_pink}DUSTY PINK{dusty_pink.OFF}...\")\nprint(f\"... and {bg_steel_blue}STEEL BLUE{bg_steel_blue.OFF} colors\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want to use DUSTY PINK...\n% ... and STEEL BLUE colors</code></pre>","tags":["Features","Tutorial","Extended Colors","RGB Colors"]},{"location":"user-guide/extended-colors/vga/","title":"VGA Colors","text":"","tags":["Features","Tutorial","Extended Colors","VGA Colors"]},{"location":"user-guide/extended-colors/vga/#what-are-vga-colors","title":"What are VGA Colors?","text":"<p>The VGA palette is based on a 8-bit color space of 216 colors and 24 shades of gray. 256 color options in total.</p> <p>Disclaimer</p> <p>Not all terminals support 8-bit VGA colors. If your terminal does support such advanced colors, read on.</p>","tags":["Features","Tutorial","Extended Colors","VGA Colors"]},{"location":"user-guide/extended-colors/vga/#full-line-text-functions","title":"Full Line Text Functions","text":"<p>Try the <code>vga()</code> and <code>bg_vga()</code> methods for a full line of colored text. The value can be an integer between <code>0</code>-<code>255</code>.</p> <p>Example:</p> Python<pre><code>from colorist import vga, bg_vga\n\nvga(\"I want this text in purple VGA colors\", 57)\nbg_vga(\"I want this background in purple VGA colors\", 57)\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want this text in purple VGA colors\n% I want this background in purple VGA colors</code></pre>","tags":["Features","Tutorial","Extended Colors","VGA Colors"]},{"location":"user-guide/extended-colors/vga/#custom-string-styling","title":"Custom String Styling","text":"<p>Or customize the styling of text and background with the <code>ColorVGA()</code> and <code>BgColorVGA()</code> classes:</p> Python<pre><code>from colorist import ColorVGA, BgColorVGA\n\nhoney_yellow = ColorVGA(220)\nbg_navy_blue = BgColorVGA(19)\n\nprint(f\"I want to use {honey_yellow}honey yellow{honey_yellow.OFF}...\")\nprint(f\"... and {bg_steel_blue}navy blue{bg_steel_blue.OFF} colors\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want to use honey yellow...\n% ... and navy blue colors</code></pre>","tags":["Features","Tutorial","Extended Colors","VGA Colors"]},{"location":"user-guide/extended-colors/vga/#palette-options-and-color-maps","title":"Palette Options and Color Maps","text":"","tags":["Features","Tutorial","Extended Colors","VGA Colors"]},{"location":"user-guide/extended-colors/vga/#standard-colors","title":"Standard Colors","text":"0\u00a0 \u00a01\u00a0 \u00a02\u00a0 \u00a03\u00a0 \u00a04\u00a0 \u00a05\u00a0 \u00a06\u00a0 \u00a07\u00a0 \u00a08\u00a0 \u00a09\u00a0 10 11 12 13 14 15","tags":["Features","Tutorial","Extended Colors","VGA Colors"]},{"location":"user-guide/extended-colors/vga/#extended-colors","title":"Extended Colors","text":"16 22 28 34 40 46 82 76 70 64 58 52 17 23 29 35 41 47 83 77 71 65 59 53 18 24 30 36 42 48 84 78 72 66 60 54 19 25 31 37 43 49 85 79 73 67 61 55 20 26 32 38 44 50 86 80 74 68 62 56 21 27 33 39 45 51 87 81 75 69 63 57 93 99 105 111 117 123 159 153 147 141 135 129 92 98 104 110 116 122 158 152 146 140 134 128 91 97 103 109 115 121 157 151 145 139 133 127 90 96 102 108 114 120 156 150 144 138 132 126 89 95 101 107 113 119 155 149 143 137 131 125 88 94 100 106 112 118 154 148 142 136 130 124 160 166 172 178 184 190 226 220 214 208 202 196 161 167 173 179 185 191 227 221 215 209 203 197 162 168 174 180 186 192 228 222 216 210 204 198 163 169 175 181 187 193 229 223 217 211 205 199 164 170 176 182 188 194 230 224 218 212 206 200 165 171 177 183 189 195 231 225 219 213 207 201","tags":["Features","Tutorial","Extended Colors","VGA Colors"]},{"location":"user-guide/extended-colors/vga/#gray-scale","title":"Gray Scale","text":"232 233 234 235 236 237 238 239 240 241 242 243 255 254 253 252 251 250 249 248 247 246 245 244","tags":["Features","Tutorial","Extended Colors","VGA Colors"]},{"location":"user-guide/standard-colors/background/","title":"How to Print Background Colors","text":"","tags":["Features","Tutorial","Background Colors","Standard Colors"]},{"location":"user-guide/standard-colors/background/#introduction","title":"Introduction","text":"<p>When you want to print colored backgrounds in the terminal, Colorist offers two ways of doing so:</p> <ul> <li>Full text functions: Print a full line of colored text with the <code>bg_green()</code>, <code>bg_yellow()</code>, <code>bg_red()</code>, etc. functions.</li> <li>Custom string styling: Mix colors to any part of a string with the <code>BgColor</code> and <code>BgBrightColor</code> classes.</li> </ul>","tags":["Features","Tutorial","Background Colors","Standard Colors"]},{"location":"user-guide/standard-colors/background/#print-line-of-text-with-background-color","title":"Print Line of Text with Background Color","text":"<p>How to print a full line of colored text in the terminal:</p> Python<pre><code>from colorist import bg_green, bg_yellow, bg_red\n\nbg_green(\"This is GREEN background!\")\nbg_yellow(\"This is YELLOW background!\")\nbg_red(\"This is RED background!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is GREEN background!\n% This is YELLOW background!\n% This is RED background!</code></pre> <p>Refer to the documetation for a complete list of color options.</p>","tags":["Features","Tutorial","Background Colors","Standard Colors"]},{"location":"user-guide/standard-colors/background/#print-mixed-colors-in-text","title":"Print Mixed Colors in Text","text":"<p>Background colors can also be mixed inside a paragraph:</p> Python<pre><code>from colorist import BgColor\n\nprint(f\"Put {BgColor.RED}RED{BgColor.OFF} background color inside this paragraph\")\nprint(f\"Both {BgColor.GREEN}GREEN{BgColor.OFF}...\")\nprint(f\"... and {BgColor.YELLOW}YELLOW{BgColor.OFF} are nice background colors\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Put RED background color inside this paragraph\n% Both GREEN...\n% ... and YELLOW are nice background colors</code></pre> <p>Tip</p> <p>Remember to turn off a color with <code>BgColor.OFF</code> or <code>BgBrightColor.OFF</code> every time you want to revert back to the default terminal text style. Otherwise, the effect may spill over and into other terminal messages.</p>","tags":["Features","Tutorial","Background Colors","Standard Colors"]},{"location":"user-guide/standard-colors/background/#bright-colors","title":"Bright Colors","text":"<p>Most terminals support bright colors that stand more out:</p> Python<pre><code>from colorist import BgBrightColor\n\nprint(f\"Add {BgBrightColor.CYAN}CYAN{BgBrightColor.OFF} background color\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Add CYAN background color</code></pre> <p>Refer to the documetation for a complete list of color options for custom background styling.</p>","tags":["Features","Tutorial","Background Colors","Standard Colors"]},{"location":"user-guide/standard-colors/background/#cheat-sheets","title":"Cheat Sheets","text":"","tags":["Features","Tutorial","Background Colors","Standard Colors"]},{"location":"user-guide/standard-colors/background/#normal-colors","title":"Normal Colors","text":"Color Color Code Example <code>BgColor.GREEN</code> <code>This is GREEN background!</code> <code>BgColor.YELLOW</code> <code>This is YELLOW background!</code> <code>BgColor.RED</code> <code>This is RED background!</code> <code>BgColor.MAGENTA</code> <code>This is MAGENTA background!</code> <code>BgColor.BLUE</code> <code>This is BLUE background!</code> <code>BgColor.CYAN</code> <code>This is CYAN background!</code> <code>BgColor.WHITE</code> <code>This is WHITE background!</code> <code>BgColor.BLACK</code> <code>This is BLACK background!</code> - <code>BgColor.DEFAULT</code> - - <code>BgColor.OFF</code> -","tags":["Features","Tutorial","Background Colors","Standard Colors"]},{"location":"user-guide/standard-colors/background/#bright-colors_1","title":"Bright Colors","text":"Color Color Code Example <code>BgBrightColor.GREEN</code> <code>This is BRIGHT GREEN background!</code> <code>BgBrightColor.YELLOW</code> <code>This is BRIGHT YELLOW background!</code> <code>BgBrightColor.RED</code> <code>This is BRIGHT RED background!</code> <code>BgBrightColor.MAGENTA</code> <code>This is BRIGHT MAGENTA background!</code> <code>BgBrightColor.BLUE</code> <code>This is BRIGHT BLUE background!</code> <code>BgBrightColor.CYAN</code> <code>This is BRIGHT CYAN background!</code> <code>BgBrightColor.WHITE</code> <code>This is BRIGHT WHITE background!</code> <code>BgBrightColor.BLACK</code> <code>This is BRIGHT BLACK background!</code> - <code>BgBrightColor.DEFAULT</code> - - <code>BgBrightColor.OFF</code> -","tags":["Features","Tutorial","Background Colors","Standard Colors"]},{"location":"user-guide/standard-colors/normal-and-bright-palette/","title":"Palette of Normal and Bright Colors","text":"","tags":["Features","Tutorial","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"user-guide/standard-colors/normal-and-bright-palette/#whats-the-difference","title":"What's the Difference?","text":"<p>Normal colors are slight dimmed and more easy on the eye than bright colors.</p> <p></p> <p>Bright colors have higher intensity that stand more out than normal colors.</p> <p>Color Definition May Vary from Terminal to Terminal</p> <p>Be aware that text in standard red color isn't the same tone of red in all terminals, whether it's normal or bright. Sometimes with a little orange teint, sometimes a little darker. And the same goes for other standard colors.</p> <p>For more insights, please refer to this overview of various terminals and their color palettes.</p>","tags":["Features","Tutorial","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"user-guide/standard-colors/normal-and-bright-palette/#color-map","title":"Color Map","text":"Color Normal Bright Green Yellow Red Magenta Blue Cyan White Black <p>Limited Support for Bright Colors</p> <p>Note that bright colors are supported by many terminals, yet not all as bright colors aren't part of the standard set of ANSI colors.</p>","tags":["Features","Tutorial","Standard Colors","Background Colors","Text Colors","Foreground Colors"]},{"location":"user-guide/standard-colors/text-foreground/","title":"How to Print Foreground Text Colors","text":"","tags":["Features","Tutorial","Standard Colors","Text Colors","Foreground Colors"]},{"location":"user-guide/standard-colors/text-foreground/#introduction","title":"Introduction","text":"<p>When you want to print colored text in the terminal, Colorist offers two ways of doing so:</p> <ul> <li>Full text functions: Print a full line of colored text with the <code>green()</code>, <code>yellow()</code>, <code>red()</code>, etc. functions.</li> <li>Custom string styling: Mix colors to any part of a string with the <code>Color</code> and <code>BrightColor</code> classes.</li> </ul>","tags":["Features","Tutorial","Standard Colors","Text Colors","Foreground Colors"]},{"location":"user-guide/standard-colors/text-foreground/#print-line-of-colored-text","title":"Print Line of Colored Text","text":"<p>How to print a full line of colored text in the terminal:</p> Python<pre><code>from colorist import green, yellow, red\n\ngreen(\"This is GREEN!\")\nyellow(\"This is YELLOW!\")\nred(\"This is RED!\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% This is GREEN!\n% This is YELLOW!\n% This is RED!</code></pre> <p>Refer to the documetation for a complete list of color options.</p>","tags":["Features","Tutorial","Standard Colors","Text Colors","Foreground Colors"]},{"location":"user-guide/standard-colors/text-foreground/#print-mixed-colors-in-text","title":"Print Mixed Colors in Text","text":"<p>How to customize colors inside a paragraph and print it in the terminal:</p> Python<pre><code>from colorist import Color\n\nprint(f\"I want {Color.RED}RED{Color.OFF} color inside this paragraph\")\n\nprint(f\"Both {Color.GREEN}GREEN{Color.OFF} and {Color.YELLOW}YELLOW{Color.OFF} are nice colors\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% I want RED color inside this paragraph\n% Both GREEN and YELLOW are nice colors</code></pre> <p>Tip</p> <p>Remember to turn off a color with <code>Color.OFF</code> or <code>BrightColor.OFF</code> every time you want to revert back to the default terminal text style. Otherwise, the effect may spill over and into other terminal messages.</p>","tags":["Features","Tutorial","Standard Colors","Text Colors","Foreground Colors"]},{"location":"user-guide/standard-colors/text-foreground/#bright-colors","title":"Bright Colors","text":"<p>Most terminals support bright colors that stand more out:</p> Python<pre><code>from colorist import BrightColor\n\nprint(f\"Put {BrightColor.CYAN}CYAN{BrightColor.OFF} inside this paragraph\")\n</code></pre> <p>How it appears in the terminal:</p> <pre><code>% Put CYAN inside this paragraph</code></pre> <p>Refer to the documetation for a complete list of color options for custom text styling.</p>","tags":["Features","Tutorial","Standard Colors","Text Colors","Foreground Colors"]},{"location":"user-guide/standard-colors/text-foreground/#cheat-sheets","title":"Cheat Sheets","text":"","tags":["Features","Tutorial","Standard Colors","Text Colors","Foreground Colors"]},{"location":"user-guide/standard-colors/text-foreground/#normal-colors","title":"Normal Colors","text":"Color Color Code Example <code>Color.GREEN</code> <code>This is GREEN!</code> <code>Color.YELLOW</code> <code>This is YELLOW!</code> <code>Color.RED</code> <code>This is RED!</code> <code>Color.MAGENTA</code> <code>This is MAGENTA!</code> <code>Color.BLUE</code> <code>This is BLUE!</code> <code>Color.CYAN</code> <code>This is CYAN!</code> <code>Color.WHITE</code> <code>This is WHITE!</code> <code>Color.BLACK</code> <code>This is BLACK!</code> - <code>Color.DEFAULT</code> - - <code>Color.OFF</code> -","tags":["Features","Tutorial","Standard Colors","Text Colors","Foreground Colors"]},{"location":"user-guide/standard-colors/text-foreground/#bright-colors_1","title":"Bright Colors","text":"Color Color Code Example <code>BrightColor.GREEN</code> <code>This is BRIGHT GREEN!</code> <code>BrightColor.YELLOW</code> <code>This is BRIGHT YELLOW!</code> <code>BrightColor.RED</code> <code>This is BRIGHT RED!</code> <code>BrightColor.MAGENTA</code> <code>This is BRIGHT MAGENTA!</code> <code>BrightColor.BLUE</code> <code>This is BRIGHT BLUE!</code> <code>BrightColor.CYAN</code> <code>This is BRIGHT CYAN!</code> <code>BrightColor.WHITE</code> <code>This is BRIGHT WHITE!</code> <code>BrightColor.BLACK</code> <code>This is BRIGHT BLACK!</code> - <code>BrightColor.DEFAULT</code> - - <code>BrightColor.OFF</code> -","tags":["Features","Tutorial","Standard Colors","Text Colors","Foreground Colors"]}]}